include:
  - local: '/infrastructure/aws/templates.yaml'
  #- local: '/infrastructure/azure/templates.yaml'
  #- local: '/infrastructure/gcp/templates.yaml'

#-----------------------------------------------------------------------------------------------------------------------
#
# Rules for execution of AWS based K3S cluster deployment:  Infrastructure jobs
#
#-----------------------------------------------------------------------------------------------------------------------
# Abstract for job manually triggering infrastructure builds
.infra fork:
  stage: ðŸ”Œ network up
  rules:
    # Run on scheduled jobs OR when `test-ci` label is assigned
    - if: '($CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "${CI_DEFAULT_BRANCH}") || $CI_MERGE_REQUEST_LABELS =~ /(^|,)test-ci::infra(,|$)/'
      allow_failure: false

# Abstract for jobs responsible for creating infrastructure
.infra create:
  rules:
    # Run on scheduled jobs OR when `test-ci` label is assigned
    - if: '($CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "${CI_DEFAULT_BRANCH}") || $CI_MERGE_REQUEST_LABELS =~ /(^|,)test-ci::infra(,|$)/'
    # skip job when branch name starts with "hotfix" or "patch"
    - if: '$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^(hotfix|patch)/'
      when: never

# Abstract for jobs responsible for cleaning up infrastructure OR when `test-ci` label is assigned
.infra cleanup:
  rules:
    # Run on scheduled jobs
    - if: '($CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "${CI_DEFAULT_BRANCH}") || $CI_MERGE_REQUEST_LABELS =~ /(^|,)test-ci::infra(,|$)/'
      allow_failure: true
      when: always

#-----------------------------------------------------------------------------------------------------------------------
#
# Terraform functions
#
#-----------------------------------------------------------------------------------------------------------------------
.terraformer:
  image:
    name: registry.dso.mil/platform-one/big-bang/pipeline-templates/pipeline-templates/terraform:0.13.5
    entrypoint:
      - /usr/bin/env
      - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  interruptible: false
  variables:
    TF_IN_AUTOMATION: "1"
    TF_VAR_ci_pipeline_url: $CI_PIPELINE_URL
  before_script:
    - git clone -b ${PIPELINE_REPO_BRANCH} ${PIPELINE_REPO} ${PIPELINE_REPO_DESTINATION}
    - echo -e "\e[0Ksection_start:`date +%s`:terraform_init[collapsed=true]\r\e[0K\e[33;1mTerraform Init\e[37m"
    - echo "$TF_VAR_env"
    - echo "$TF_VAR_vpc_cidr"
    - cd ${TF_ROOT}
    - terraform version
    - terraform init -input=false
    # Loop to retry terraform workspace creation due to issues locking terraform.state in s3
    - |
      set -e
      attempt_counter=0
      max_attempts=5
      until [ $(terraform workspace select $TF_VAR_env >/dev/null || terraform workspace new $TF_VAR_env >/dev/null; echo $?) -eq 0 ]; do
        if [ ${attempt_counter} -eq ${max_attempts} ];then
          echo "Error creating workspace"
          exit 1
        fi
        attempt_counter=$(($attempt_counter+1))
        sleep 5
      done
    - terraform validate
    - echo -e "\e[0Ksection_end:`date +%s`:terraform_init\r\e[0K"

.terraform destroy workspace:
  after_script:
    - echo -e "\e[0Ksection_start:`date +%s`:terraform_destroy_workspace[collapsed=true]\r\e[0K\e[33;1mTerraform Destroy Workspace\e[37m"
    - cd ${TF_ROOT}
    # Loop to retry terraform workspace destory
    - |
      set -e
      attempt_counter=0
      max_attempts=2
      until [ $(terraform workspace select default >/dev/null && terraform workspace delete "${TF_VAR_env}" >/dev/null; echo $?) -eq 0 ]; do
        if [ ${attempt_counter} == ${max_attempts} ];then
          echo "Error destroying terraform workspace"
          exit 1
        fi
        attempt_counter=$(($attempt_counter+1))
        echo "Attempt failed to destroy workspace will retry in 30 seconds"
        sleep 30
      done
    - echo -e "\e[0Ksection_end:`date +%s`:terraform_destroy_workspace\r\e[0K"

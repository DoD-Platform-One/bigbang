.network:
  extends: .terraformer
  variables:
    TF_ROOT: "${PIPELINE_REPO_DESTINATION}/infrastructure/aws/dependencies/terraform/env/ci"

.network up:
  extends: .network
  script:
    - echo -e "\e[0Ksection_start:`date +%s`:network_up[collapsed=true]\r\e[0K\e[33;1mNetwork Up\e[37m"  
    - echo "Creating network with cidr range ${TF_VAR_vpc_cidr}"
    # Loop to retry network up terraform apply due to issues locking terraform.state in s3
    - |
      set -e
      attempt_counter=0
      max_attempts=2
      until [ $(terraform apply -auto-approve >/dev/null; echo $?) -eq 0 ]; do
        if [ ${attempt_counter} == ${max_attempts} ];then
          echo "Error applying network up terraform"
          exit 1
        fi
        attempt_counter=$(($attempt_counter+1))
        echo "❌ Attempt FAILED to apply will retry in 30 seconds"
        sleep 30
      done
    - echo -e "\e[0Ksection_end:`date +%s`:network_up\r\e[0K"    

.network down:
  extends:
    - .network
    - .terraform destroy workspace
  script:
    - echo -e "\e[0Ksection_start:`date +%s`:network_down[collapsed=true]\r\e[0K\e[33;1mNetwork Down\e[37m"
    - echo "Destroying network"
    # Loop to retry network terraform destory
    - |
      set -e
      attempt_counter=0
      max_attempts=2
      until [ $(terraform destroy -auto-approve >/dev/null; echo $?) -eq 0 ]; do
        if [ ${attempt_counter} == ${max_attempts} ];then
          echo "Error destroying network terraform"
          exit 1
        fi
        attempt_counter=$(($attempt_counter+1))
        echo "❌ Attempt FAILED to destroy will retry in 30 seconds"
        sleep 30
      done
    - echo -e "\e[0Ksection_end:`date +%s`:network_down\r\e[0K"

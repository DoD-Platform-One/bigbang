.container scan:
  stage: scan

.trivy scan:
  extends: .container scan
  image: 
    name: aquasec/trivy:0.9.0
    entrypoint: [""]
  variables:
    IMAGE: $CI_REGISTRY_IMAGE
  before_script:
    - apk add skopeo
  script:
    # Copy the image down as an oci container (so we don't need the docker daemon running)
    - skopeo copy --screds $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD docker://$IMAGE:$CI_COMMIT_SHORT_SHA oci:/image

    # Run the initial scan and prettyprint the output table
    - trivy --no-progress --input /image

    # Output report as json to a file
    - trivy --no-progress -f json -o gl-container-scanning-report.json --input /image

    # # Fail on high and critical vulnerabilities
    # - trivy --exit-code 1 --cache-dir .trivycache/ --severity CRITICAL --no-progress $IMAGE:$CI_COMMIT_SHORT_SHA
    - echo "This scan is currently only implemented for awareness, no pipeline actions are taken as a result of the scans"
  # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab EE Ultimate or GitLab.com Gold)
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json

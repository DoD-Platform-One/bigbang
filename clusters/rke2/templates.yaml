.rke2 tf:
  extends: .terraformer
  variables:
    TF_ROOT: "${PIPELINE_REPO_DESTINATION}/clusters/rke2/dependencies/terraform/env/ci"

.rke2 up:
  extends: .rke2 tf
  script:
    - echo -e "\e[0Ksection_start:`date +%s`:rke2_up[collapsed=true]\r\e[0K\e[33;1mRKE2 Up\e[37m"
    # Fetch dependencies
    - apk add bash aws-cli
    # Loop to retry rke2 terraform apply
    - |
      set -e
      attempt_counter=0
      max_attempts=2
      until [ $(terraform apply -input=false -auto-approve >/dev/null; echo $?) -eq 0 ]; do
        if [ ${attempt_counter} == ${max_attempts} ];then
          echo "Error applying rke2 cluster up terraform"
          exit 1
        fi
        attempt_counter=$(($attempt_counter+1))
        echo "Attempt failed to apply will retry in 30 seconds"
        sleep 30
      done
    - mv rke2.yaml ${CI_PROJECT_DIR}/rke2.yaml
    - echo -e "\e[0Ksection_end:`date +%s`:rke2_up\r\e[0K"
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/rke2.yaml

.rke2 down:
  extends:
    - .rke2 tf
    - .terraform destroy workspace
  script:
    - echo -e "\e[0Ksection_start:`date +%s`:rke2_down[collapsed=true]\r\e[0K\e[33;1mRKE2 Down\e[37m"
    # Loop to retry rke2 terraform destory
    - |
      set -e
      attempt_counter=0
      max_attempts=2
      until [ $(terraform destroy -input=false -auto-approve >/dev/null; echo $?) -eq 0 ]; do
        if [ ${attempt_counter} == ${max_attempts} ];then
          echo "Error destroying rke2 cluster terraform"
          exit 1
        fi
        attempt_counter=$(($attempt_counter+1))
        echo "Attempt failed to destroy will retry in 30 seconds"
        sleep 30
      done
    - echo -e "\e[0Ksection_end:`date +%s`:rke2_down\r\e[0K"

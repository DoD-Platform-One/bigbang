stages:
  - configuration validation
  - package tests

configuration validation:
  stage: configuration validation
  tags:
    - bigbang
    - public
    - privileged

  image: 
    name: registry.dsop.io/platform-one/big-bang/pipeline-templates/pipeline-templates/k3d-builder:0.0.1
  variables:
    PIPELINE_REPO: https://repo1.dsop.io/platform-one/big-bang/pipeline-templates/pipeline-templates.git
    PIPELINE_REPO_DESTINATION: "../pipeline-repo"
    GENERIC_POLICY_PATH: "${PIPELINE_REPO_DESTINATION}/policies"

  before_script:
    - git clone ${PIPELINE_REPO} ${PIPELINE_REPO_DESTINATION}

  script:
    # Place configuration validation tests here
    - echo "Directory structure of repository:"
    - tree .
    - echo "Generic configuration validation tests:"
    - helm conftest chart --policy ${GENERIC_POLICY_PATH}
    - >
      if [ -d "policy" ]; then
        echo "App specific configuration validation tests:"
        helm conftest chart --policy policy
      fi

package tests:
  stage: package tests
  tags:
    - bigbang
    - public
    - privileged

  image: 
    name: registry.dsop.io/platform-one/big-bang/pipeline-templates/pipeline-templates/k3d-builder:0.0.1
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://localhost:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""

  before_script:
    # Starting dnsmasq for cluster dns resolution
    - docker run -d -p 53:53/udp -p 53:53 registry.dsop.io/platform-one/big-bang/pipeline-templates/pipeline-templates/go-dnsmasq:release-1.0.7
    - echo "nameserver 127.0.0.1" >> /etc/resolv.conf

    # Create cluster and wait for deployments and pods
    - k3d cluster create ${CI_PROJECT_NAME} --agents 1 --servers 1 --k3s-server-arg "--disable=metrics-server" --k3s-server-arg "--disable=traefik" -p 80:80@loadbalancer -p 443:443@loadbalancer --wait
    - while ! (kubectl get node | grep "agent" > /dev/null); do sleep 3; done
    - kubectl wait --for=condition=available --timeout 600s -A deployment --all > /dev/null
    - kubectl wait --for=condition=ready --timeout 600s -A pods --all --field-selector status.phase=Running > /dev/null
    - kubectl get all -A
    - kubectl create namespace ${CI_PROJECT_NAME}
    - kubectl create -n ${CI_PROJECT_NAME} secret docker-registry private-registry --docker-server="https://registry1.dsop.io" --docker-username='bigbang$robot' --docker-password="${REGISTRY1_PASSWORD}"
    - kubectl get secret -n ${CI_PROJECT_NAME} private-registry -o yaml
    - if [[ "${CI_PROJECT_NAME}" != *"istio"* ]]; then istioctl install -y; fi 

  script:
    # Place kubernetes package test here
    - echo "Package install"
    - if [ -f tests/test-values.yml ]; then helm install ${CI_PROJECT_NAME} chart -n ${CI_PROJECT_NAME} --create-namespace -f tests/test-values.yml; else helm install ${CI_PROJECT_NAME} chart -n ${CI_PROJECT_NAME} --create-namespace; fi
    - sleep 100
    - kubectl get all -n ${CI_PROJECT_NAME}
    - kubectl describe pod -n ${CI_PROJECT_NAME}
    - kubectl wait --for=condition=available --timeout 600s -A deployment --all > /dev/null
    - kubectl wait --for=condition=ready --timeout 600s -A pods --all --field-selector status.phase=Running > /dev/null
    - echo "Package tests"
    - kubectl get ingress --all-namespaces
    - kubectl get vs -A
    - kubectl get all -A
    - if [ -f tests/cypress.json ]; then cypress run --config-file tests/cypress.json; fi

  after_script:
    # Delete Cluster
    - k3d cluster delete ${CI_PROJECT_NAME}

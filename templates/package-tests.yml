stages:
  - configuration validation
  - package tests

configuration validation:
  stage: configuration validation
  tags:
    - bigbang
    - public
    - privileged

  image: 
    name: registry.dso.mil/platform-one/big-bang/pipeline-templates/pipeline-templates/k3d-builder:afdd9b77
  variables:
    PIPELINE_REPO: https://repo1.dso.mil/platform-one/big-bang/pipeline-templates/pipeline-templates.git
    PIPELINE_REPO_DESTINATION: "../pipeline-repo"
    GENERIC_POLICY_PATH: "${PIPELINE_REPO_DESTINATION}/policies"

  before_script:
    - git clone ${PIPELINE_REPO} ${PIPELINE_REPO_DESTINATION}

  script:
    # Place configuration validation tests here
    - echo "Directory structure of repository:"
    - tree .
    - echo "Generic configuration validation tests:"
    - helm dependency update chart
    
    # Global policy tests
    - helm conftest chart --policy ${GENERIC_POLICY_PATH}

    # Package specific tests
    - |
      if [ -d "policy" ]; then
        echo "App specific configuration validation tests:"
        helm conftest chart --policy policy
      fi

package tests:
  stage: package tests
  tags:
    - bigbang
    - public
    - privileged

  image: 
    name: registry.dso.mil/platform-one/big-bang/pipeline-templates/pipeline-templates/k3d-builder:afdd9b77
  services:
    - registry.dso.mil/platform-one/big-bang/pipeline-templates/pipeline-templates/docker:dind
  variables:
    DOCKER_HOST: tcp://localhost:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  
  artifacts:
    when: always
    paths:
      - tests/cypress/screenshots
      - tests/cypress/videos
    expire_in: 3 days

  before_script:
    # Starting dnsmasq for cluster dns resolution
    - docker run -d -p 53:53/udp -p 53:53 registry.dso.mil/platform-one/big-bang/pipeline-templates/pipeline-templates/go-dnsmasq:87fca1d1
    - echo "nameserver 127.0.0.1" >> /etc/resolv.conf

    # Create cluster and wait for deployments and pods
    - k3d cluster create ${CI_PROJECT_NAME} --servers 1 --k3s-server-arg "--disable=metrics-server" --k3s-server-arg "--disable=traefik" -p 80:80@loadbalancer -p 443:443@loadbalancer --wait
    - kubectl wait --for=condition=available --timeout 600s -A deployment --all > /dev/null
    - kubectl wait --for=condition=ready --timeout 600s -A pods --all --field-selector status.phase=Running > /dev/null

    # Need namespace and secret for registry1 images
    - kubectl create namespace ${CI_PROJECT_NAME}
    - kubectl create -n ${CI_PROJECT_NAME} secret docker-registry private-registry-mil --docker-server="https://registry1.dso.mil" --docker-username='robot$bigbang' --docker-password="${REGISTRY1_PASSWORD}"
    # Remove once everything is moved to dso.mil
    - kubectl create -n ${CI_PROJECT_NAME} secret docker-registry private-registry --docker-server="https://registry1.dsop.io" --docker-username='robot$bigbang' --docker-password="${REGISTRY1_PASSWORD}"

    # Need additional namespace and secret for registry1 images
    - |
       if [ ! -z "${PROJECT_NAME}" ]; then
         kubectl create ns ${PROJECT_NAME}
         echo "additional name space created"
         kubectl create -n ${PROJECT_NAME} secret docker-registry private-registry-mil --docker-server="https://registry1.dso.mil" --docker-username='robot$bigbang' --docker-password="${REGISTRY1_PASSWORD}"
         # Remove once everything is moved to dso.mil
         kubectl create -n ${PROJECT_NAME} secret docker-registry private-registry --docker-server="https://registry1.dsop.io" --docker-username='robot$bigbang' --docker-password="${REGISTRY1_PASSWORD}"
       fi

    # Check for istio in package name if not there install istio
    - |
      if [[ "${CI_PROJECT_NAME}" != *"istio"* ]]; then 
        istioctl install -y
      fi

    # Check for gateway if found generate throw away wildcard-cert secret and apply gateway
    - |
      if [ -f "tests/main-test-gateway.yaml" ]; then 
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj "/CN=*.bigbang.dev"
        kubectl create -n istio-system secret tls wildcard-cert --key="tls.key" --cert="tls.crt"  
        kubectl apply -f tests/main-test-gateway.yaml 
      fi

    # Check for dependency repo, create namespace, helm dep update, secret, and helm install with test-values if present default if not
    - |
      if [ ! -z ${DEPENDENCY_REPO} ]; then
        if [ ! -z ${DEPENDENCY_REPO_BRANCH} ]; then
          git clone -b ${DEPENDENCY_REPO_BRANCH} ${DEPENDENCY_REPO} dependency-repo
        else
          git clone ${DEPENDENCY_REPO} dependency-repo
        fi
        helm dependency update dependency-repo/chart
        kubectl create namespace ${CI_PROJECT_NAME}-dependency
        kubectl create -n ${CI_PROJECT_NAME}-dependency secret docker-registry private-registry-mil --docker-server="https://registry1.dso.mil" --docker-username='robot$bigbang' --docker-password="${REGISTRY1_PASSWORD}"
        # Remove once everything is moved to dso.mil
        kubectl create -n ${CI_PROJECT_NAME}-dependency secret docker-registry private-registry --docker-server="https://registry1.dsop.io" --docker-username='robot$bigbang' --docker-password="${REGISTRY1_PASSWORD}"
        if [ -f dependency-repo/tests/test-values.yml ]; then
          helm install --wait --timeout 600s ${CI_PROJECT_NAME}-dependency dependency-repo/chart -n ${CI_PROJECT_NAME}-dependency --create-namespace -f dependency-repo/tests/test-values.yml
        else
          helm install --wait --timeout 600s ${CI_PROJECT_NAME}-dependency dependency-repo/chart -n ${CI_PROJECT_NAME}-dependency --create-namespace
        fi
      fi

    # Wait for Running state
    - kubectl wait --for=condition=established --timeout 600s -A crd --all > /dev/null
    - kubectl wait --for=condition=available --timeout 600s -A deployment --all > /dev/null
    - kubectl wait --for=condition=ready --timeout 600s -A pods --all --field-selector status.phase=Running > /dev/null

    # If test-sysctl-mod exists apply it
    - |
      if [ -f "tests/test-sysctl-mod.yml" ]; then
        kubectl apply -f tests/test-sysctl-mod.yml
      fi

  script:
    # Place kubernetes package test here
    - echo "Package install"
    - helm dependency update chart

    # Check for test values file
    - |
      if [ -f "tests/test-values.yml" ]; then 
        helm install --wait --timeout 600s ${CI_PROJECT_NAME} chart -n ${CI_PROJECT_NAME} --create-namespace -f tests/test-values.yml
      else 
        helm install --wait --timeout 600s ${CI_PROJECT_NAME} chart -n ${CI_PROJECT_NAME} --create-namespace
      fi
    - kubectl wait --for=condition=established --timeout 60s -A crd --all > /dev/null
    - kubectl wait --for=condition=available --timeout 600s -A deployment --all > /dev/null
    - kubectl wait --for=condition=ready --timeout 600s -A pods --all --field-selector status.phase=Running > /dev/null
    - echo "Package tests"

    # If istio-ingressgateway has a loadBalancer IP and ${CI_PROJECT_NAME} namespace has a virtualService hostname add value to /etc/hosts
    - |
      if [ ! -z $(kubectl get services -n istio-system istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}') ] && [ ! -z $(kubectl get vs -n ${CI_PROJECT_NAME} -o jsonpath='{.items[0].spec.hosts[0]}') ]; then
        echo "$(kubectl get services -n istio-system istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}') $(kubectl get vs -n ${CI_PROJECT_NAME} -o jsonpath='{.items[*].spec.hosts[0]}')" >> /etc/hosts
      fi

    # Cypress Tests
    - |
      if [ -f "tests/cypress.json" ]; then
        cd tests && cypress run
      fi

  after_script:
    # Delete Cluster
    - k3d cluster delete ${CI_PROJECT_NAME}

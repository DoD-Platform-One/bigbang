# Bigbang CI pipelines defintiions
# There are 4 different use-cases/pipelines that are supported by this file:
#   1) Build and test changes made from a Merge Reuqest using a docker-in-docker (DIND) K3D cluster deployment inside the
#      gitlab runner.
#   2) Build and test a commit to the main branch (default branch) using a AWS created K3S cluster which is deployed
#       using Terraform
#   3) Build and test a new release and/or tagged commit using a docker-in-docker (DIND) K3D cluster deployment inside the
#      gitlab runner.   Once a successful build and test is completed, package the build and perform a release operation.
#   4) Periodically at a scheduled time, build and test the main branch  using a AWS created K3S cluster which is deployed
#       using Terraform

# global rules for when pipelines run
workflow:
  rules:
    # skip pipeline for MRs with docs label
    - if: $CI_MERGE_REQUEST_LABELS =~ /(^|,)kind::docs(,|$)/
      when: never
    # skip pipeline for MRs with disable-ci label
    - if: $CI_MERGE_REQUEST_LABELS =~ /(^|,)disable-ci(,|$)/
      when: never
    # run pipeline for tag events such as a new release
    - if: $CI_COMMIT_TAG
    # run pipeline on merge request events
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    # run pipeline on commits to default branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    # Enabled CI pipeline testing if commit message contains "test-ci"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_MESSAGE =~ /.*test-ci.*/i

# Include templates and cluster creation jobs
include:
  - local: '/library/templates.yaml'

# Pipeline stages
#  - Smoke tests are executed for all pipelines except scheduled nightly runs.
stages:
  - ðŸ”¥ smoke tests
  - ðŸ”Œ network up
  - âš“ cluster up
  - ðŸŒŒ bigbang up
  - ðŸ¤ž test
  - ðŸ’£ bigbang down
  - ðŸ’£ cluster down
  - ðŸ’£ network down
  - âš“ airgap up
  - ðŸŒŒ bigbang airgap up
  - ðŸ’£ airgap down
  - ðŸ“¦ package
  - ðŸš€ release
  - ðŸš€ release branch
  - ðŸ¤ž oci artifact tests

variables:
  PIPELINE_REPO: https://repo1.dso.mil/big-bang/pipeline-templates/pipeline-templates.git
  PIPELINE_REPO_DESTINATION: "../pipeline-repo"
  PIPELINE_REPO_BRANCH: master
  CERT_FILE_URL: https://repo1.dso.mil/big-bang/bigbang/-/raw/master/chart/ingress-certs.yaml
  # Change this back to releases after move is complete and old bucket moved
  RELEASE_BUCKET: umbrella-bigbang-releases
  IMAGE_LIST: images.txt
  PACKAGE_IMAGE_FILE: "package-images.yaml"
  IMAGE_PKG: images.tar.gz
  REPOS_PKG: repositories.tar.gz
  CHECKSUM_FILE: ${CI_PROJECT_NAME}-${CI_COMMIT_TAG}_checksums.txt
  VALUES_FILE: chart/values.yaml
  CI_VALUES_FILE: tests/test-values.yaml
  MAPPING_FILE: tests/package-mapping.yaml
  REGISTRY1_USER: $REGISTRY1_USER
  PIPELINE_TYPE: "BB"
  DEBUG_ENABLED: "false"
  METRICS_DISABLED: "false"
  MULTI_NODE: "false"
  JOB_TYPE: "default"

#-----------------------------------------------------------------------------------------------------------------------
#
# Pre Stage Job.   This executes before any clean install or upgrade job is run.
#
#-----------------------------------------------------------------------------------------------------------------------
pre vars:
  stage: .pre
  # Never run if this is not one of the scheduled job types below
  rules:
    - if: $JOB_TYPE == "cut_release"
      when: never
    - if: $JOB_TYPE == "nightly"
      when: never
    - if: '$CI_MERGE_REQUEST_LABELS =~ /(^|,)test-ci::rke2(,|$)/'
      when: never
    - if: '$CI_MERGE_REQUEST_LABELS =~ /(^|,)test-ci::eks(,|$)/'
      when: never
    - if: '$CI_MERGE_REQUEST_LABELS =~ /(^|,)test-ci::airgap(,|$)/'
      when: never
  extends:
    - .generic-runner-tags
    - .util-image
    - .templates
  script:
    - check_changes
    - label_check
    - package_lint
    - oscal_validate
  artifacts:
    reports:
      dotenv: variables.env
  retry:
    max: 2
    when:
      - unknown_failure
      - stuck_or_timeout_failure
      - runner_system_failure

#-----------------------------------------------------------------------------------------------------------------------
#
# Pre Stage Job.   This executes before any infrastructure pipeline is run.
#
#-----------------------------------------------------------------------------------------------------------------------
pre infra vars:
  stage: .pre
  # Never run if this is not one of the scheduled job types below
  rules:
    - if: $JOB_TYPE == "cut_release"
      when: never
    - if: '$CI_MERGE_REQUEST_LABELS =~ /(^|,)test-ci::rke2(,|$)/'
    - if: '$CI_MERGE_REQUEST_LABELS =~ /(^|,)test-ci::eks(,|$)/'
    - if: '$CI_MERGE_REQUEST_LABELS =~ /(^|,)test-ci::airgap(,|$)/'
    - if: $JOB_TYPE == "nightly"
  extends:
    - .generic-runner-tags
    - .util-image
    - .templates
  script:
    # Create the TF_VAR_env variable
    - pre_vars
    - label_check
    - package_lint
    - oscal_validate
  artifacts:
    reports:
      dotenv: variables.env
  retry:
    max: 2
    when:
      - unknown_failure
      - stuck_or_timeout_failure
      - runner_system_failure

#-----------------------------------------------------------------------------------------------------------------------
#
# Smoke Tests
#
#-----------------------------------------------------------------------------------------------------------------------
.chart_changes: &chart_changes
  changes:
    - chart/**/*
    - .gitlab-ci.yml
    - .gitlab-ci/jobs/**/*
    - scripts/**/*
    - tests/**/*
    - base/flux/*

clean install:
  stage: ðŸ”¥ smoke tests
  needs:
    - job: pre vars
      artifacts: true
  extends:
    - .bigbang-runner-tags
    - .k3d-ci
  variables:
    CLUSTER_NAME: "clean-${CI_COMMIT_SHORT_SHA}"
  rules:
    # Always run a clean installation test unless we are deploying the AWS cluster installation during a scheduled test (nightly main test)
    - if: '($CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH)'
      when: never
    - if: '$CI_MERGE_REQUEST_LABELS =~ /(^|,)test-ci::infra(,|$)/'
      when: never
    - if: '$CI_MERGE_REQUEST_LABELS =~ /(^|,)test-ci::rke2(,|$)/'
      when: never
    - if: '$CI_MERGE_REQUEST_LABELS =~ /(^|,)test-ci::eks(,|$)/'
      when: never
    - if: '$CI_MERGE_REQUEST_LABELS =~ /(^|,)test-ci::airgap(,|$)/'
      when: never
    - *chart_changes
  script:
    - dependency_images
    - deploy_bigbang
    # Fetch list of all images ran (retry crictl up to 6x)
    - installed_images
    - image_list_creation
    - bigbang_additional_images
    - test_bigbang
    - |
      if [[ $EXIT_FLAG -eq 1 ]]; then
        exit 123
      fi
  artifacts:
    paths:
      - events.txt
      - get_cpumem.txt
      - cluster_info_dump.txt
      - images.txt
      - pod_logs
      - kubectl_describes
      - "test-artifacts/"
    expire_in: 3 days
    when: always
  allow_failure:
    exit_codes: 123
  retry:
    max: 2
    when:
      - unknown_failure
      - stuck_or_timeout_failure
      - runner_system_failure

upgrade:
  stage: ðŸ”¥ smoke tests
  needs:
    - job: pre vars
      artifacts: true
  extends:
    - .bigbang-runner-tags
    - .k3d-ci
  rules:
    # skip job for nightly main and "test-ci::rke2" labeled pipelines
    - if: '($CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH) || $CI_MERGE_REQUEST_LABELS =~ /(^|,)test-ci::rke2(,|$)/ || $CI_MERGE_REQUEST_LABELS =~ /(^|,)test-ci::eks(,|$)/ || $CI_MERGE_REQUEST_LABELS =~ /(^|,)test-ci::airgap(,|$)/'
      when: never
    # skip job when MR title starts with 'SKIP UPGRADE'
    - if: '$CI_MERGE_REQUEST_TITLE =~ /SKIP UPGRADE/'
      when: never
    # run pipeline on merge request events
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      <<: *chart_changes
  variables:
    CLUSTER_NAME: "upgrade-${CI_COMMIT_SHORT_SHA}"
  script:
    - echo "ðŸŒŒ Install Big Bang from ${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}"
    - echo -e "\e[0Ksection_start:`date +%s`:git_target[collapsed=true]\r\e[0K\e[33;1mGit Fetch ${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}\e[37m"
    - git fetch && git checkout ${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}
    - echo -e "\e[0Ksection_end:`date +%s`:git_target\r\e[0K"
    - deploy_bigbang
    - test_bigbang
    - echo "ðŸŒŒ Upgrade Big Bang to ${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}"
    - echo -e "\e[0Ksection_start:`date +%s`:git_upgrade[collapsed=true]\r\e[0K\e[33;1mGit Upgrade\e[37m"
    - git reset --hard && git clean -fd
    - git checkout ${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}
    - echo -e "\e[0Ksection_end:`date +%s`:git_upgrade\r\e[0K"
    - deploy_bigbang
    - test_bigbang
    - |
      if [[ $EXIT_FLAG -eq 1 ]]; then
        exit 123
      fi
  artifacts:
    paths:
      - events.txt
      - get_cpumem.txt
      - cluster_info_dump.txt
      - pod_logs
      - kubectl_describes
      - "test-artifacts/"
    expire_in: 3 days
    when: always
  allow_failure:
    exit_codes: 123
  retry:
    max: 2
    when:
      - unknown_failure
      - stuck_or_timeout_failure
      - runner_system_failure

#-----------------------------------------------------------------------------------------------------------------------
#
# OCI/HelmRepo tests
#
#-----------------------------------------------------------------------------------------------------------------------

clean install oci:
  stage: ðŸ¤ž oci artifact tests
  needs:
    - job: pre vars
      artifacts: true
  extends:
    - .bigbang-runner-tags
    - .k3d-ci
  variables:
    CLUSTER_NAME: "clean-${CI_COMMIT_SHORT_SHA}-oci"
    CI_VALUES_OVERRIDES_FILE: tests/oci-values.yaml
  rules:
    - if: '$CI_MERGE_REQUEST_LABELS =~ /(^|,)test-ci::airgap(,|$)/'
      when: never
    - if: '$JOB_TYPE == "cut_release"'
      when: never
    # Run on scheduled jobs OR when `test-ci` label is assigned
    - if: '($CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH) || $CI_MERGE_REQUEST_LABELS =~ /(^|,)test-ci::oci(,|$)/'
  script:
    - dependency_images
    - deploy_bigbang
    # Fetch list of all images ran (retry crictl up to 6x)
    - installed_images
    - image_list_creation
    - bigbang_additional_images
    - test_bigbang
    - |
      if [[ $EXIT_FLAG -eq 1 ]]; then
        exit 123
      fi
  artifacts:
    paths:
      - events.txt
      - get_cpumem.txt
      - cluster_info_dump.txt
      - images.txt
      - pod_logs
      - kubectl_describes
      - "test-artifacts/"
    expire_in: 3 days
    when: always
  allow_failure:
    exit_codes: 123
  retry:
    max: 2
    when:
      - unknown_failure
      - stuck_or_timeout_failure
      - runner_system_failure


#-----------------------------------------------------------------------------------------------------------------------
#
# Package and Release Jobs
#
#-----------------------------------------------------------------------------------------------------------------------
package:
  stage: ðŸ“¦ package
  extends:
    - .release-runner-tags
    - .util-image
    - .templates
  rules:
    # run job for manual tag events or test-ci::release MRs
    - if: '$CI_COMMIT_TAG || $CI_MERGE_REQUEST_LABELS =~ /(^|,)test-ci::release(,|$)/'
  script:
    - synker_pull
    - bigbang_package_repos
    - bigbang_package_images
    # Prep release
    - bigbang_prep
    # Publish packages to s3 release
    - bigbang_publish
  retry:
    max: 2
    when:
      - unknown_failure
      - stuck_or_timeout_failure
      - runner_system_failure
  allow_failure:
    exit_codes: 99

oci creation:
  stage: ðŸ“¦ package
  extends:
    - .util-image
    - .generic-runner-tags
    - .templates
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - oci_release
  retry:
    max: 2
    when:
      - unknown_failure
      - stuck_or_timeout_failure
      - runner_system_failure

release:
  stage: ðŸš€ release
  extends:
    - .release-runner-tags
    - .util-image
    - .templates
  rules:
    # run job for manual tag events or test-ci::release MRs
    - if: '$CI_COMMIT_TAG || $CI_MERGE_REQUEST_LABELS =~ /(^|,)test-ci::release(,|$)/'
  variables:
    RELEASE_ENDPOINT: https://${RELEASE_BUCKET}.s3-${AWS_DEFAULT_REGION}.amazonaws.com/umbrella/${CI_COMMIT_TAG}
  script:
    # Use release-cli to cut a release in Gitlab or simulate a dry-run & print asset links
    - bigbang_release_check
    - bigbang_release
    - bigbang_docs_compile
  retry:
    max: 2
    when:
      - unknown_failure
      - stuck_or_timeout_failure
      - runner_system_failure
  allow_failure:
    exit_codes: 123


#-----------------------------------------------------------------------------------------------------------------------
#
# Release Cut
#
#-----------------------------------------------------------------------------------------------------------------------
cut_release:
  stage: ðŸš€ release branch
  rules:
    - if: '$JOB_TYPE == "cut_release"'
  extends:
    - .generic-runner-tags
    - .util-image
    - .templates
  script:
    - bigbang_cut_release $RELEASE_TYPE

#-----------------------------------------------------------------------------------------------------------------------
#
# Infrastructure: Networking
#
#-----------------------------------------------------------------------------------------------------------------------
aws/network up:
  extends:
    - .generic-runner-tags
    - .infra aws fork
    - .network up
  needs:
    - job: pre infra vars
      artifacts: true
  environment:
    name: review/aws-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}
    auto_stop_in: 1 hour
  retry:
    max: 2
    when:
      - unknown_failure
      - stuck_or_timeout_failure
      - runner_system_failure

aws/network down:
  extends:
    - .generic-runner-tags
    - .infra aws cleanup
    - .network down
  needs:
    - job: pre infra vars
      artifacts: true
    - job: aws/rke2/cluster down
      optional: true
    - job: aws/eks/cluster down
      optional: true
  stage: ðŸ’£ network down
  environment:
    name: review/aws-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}
    action: stop
  retry:
    max: 2
    when:
      - unknown_failure
      - stuck_or_timeout_failure
      - runner_system_failure


#-----------------------------------------------------------------------------------------------------------------------
#
# Infrastructure: RKE2
#
#-----------------------------------------------------------------------------------------------------------------------
# Create RKE2 cluster on AWS
aws/rke2/cluster up:
  stage: âš“ cluster up
  extends:
    - .generic-runner-tags
    - .rke2 up
  needs:
    - job: aws/network up
    - job: pre infra vars
      artifacts: true
  environment:
    name: review/aws-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}
  retry:
    max: 2
    when:
      - unknown_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# Install BigBang on RKE2 cluster on AWS
aws/rke2/bigbang up:
  stage: ðŸŒŒ bigbang up
  extends:
    - .generic-runner-tags
    - .rke2 activated
    - .kubectl-output
    - .templates
  needs:
    - job: aws/rke2/cluster up
      artifacts: true
    - job: pre infra vars
      artifacts: true
  variables:
    CI_VALUES_OVERRIDES_FILE: tests/rke2-test-values.yaml
  script:
    - mkdir -p ~/.kube
    - cp ${CI_PROJECT_DIR}/rke2.yaml ~/.kube/config && chmod 0600 ~/.kube/config
    # Deploy CSI/Storage Class for AWS EBS
    - kubectl apply -k "github.com/kubernetes-sigs/aws-ebs-csi-driver/deploy/kubernetes/overlays/stable/?ref=release-1.17"
    - kubectl apply -f ${PIPELINE_REPO_DESTINATION}/clusters/rke2/dependencies/k8s-resources/aws/default-ebs-sc.yaml
    - deploy_bigbang
  environment:
    name: review/aws-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}
  artifacts:
    paths:
      - events.txt
      - get_cpumem.txt
      - cluster_info_dump.txt
      - images.txt
      - pod_logs
      - kubectl_describes
      - "test-artifacts/"
    expire_in: 3 days
    when: always

# Run tests on BigBang on RKE2 cluster on AWS
aws/rke2/bigbang test:
  stage: ðŸ¤ž test
  extends:
    - .generic-runner-tags
    - .rke2 activated
    - .kubectl-output
    - .templates
  needs:
    - job: aws/rke2/cluster up
      artifacts: true
    - job: aws/rke2/bigbang up
    - job: pre infra vars
      artifacts: true
  script:
    - mkdir -p ~/.kube
    - cp ${CI_PROJECT_DIR}/rke2.yaml ~/.kube/config && chmod 0600 ~/.kube/config
    - test_bigbang
    - |
      if [[ $EXIT_FLAG -eq 1 ]]; then
        exit 123
      fi
  environment:
    name: review/aws-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}
  allow_failure:
    exit_codes: 123
  artifacts:
    paths:
      - events.txt
      - get_cpumem.txt
      - cluster_info_dump.txt
      - pod_logs
      - kubectl_describes
      - "test-artifacts/"
    expire_in: 3 days
    when: always

# Uninstall BigBang on RKE2 cluster on AWS
aws/rke2/bigbang down:
  stage: ðŸ’£ bigbang down
  extends:
    - .generic-runner-tags
    - .rke2 cleanup
    - .kubectl-output
    - .templates
  needs:
    - job: aws/rke2/cluster up
      artifacts: true
    - job: aws/rke2/bigbang test
  script:
    - mkdir -p ~/.kube
    - cp ${CI_PROJECT_DIR}/rke2.yaml ~/.kube/config && chmod 0600 ~/.kube/config
    # Delete Istio HR first so that Istio Operator cleans up child resources (ELB from service)
    # Allow failure here since Istio might not be up
    - kubectl delete hr istio -n bigbang --wait || true
    # To fix issue with kyverno svc webhook timeouts on helm uninstall
    - kubectl delete validatingwebhookconfiguration kyverno-policy-validating-webhook-cfg kyverno-resource-validating-webhook-cfg
    - kubectl delete mutatingwebhookconfiguration kyverno-policy-mutating-webhook-cfg kyverno-verify-mutating-webhook-cfg kyverno-resource-mutating-webhook-cfg monitoring-monitoring-kube-admission
    - kubectl scale deploy kyverno-kyverno -n kyverno --replicas 0
    - kubectl scale deploy kyverno-kyverno -n kyverno --replicas 3
    # Sleep to be sure webhook configurations are gone
    - sleep 2m
    # Helm uninstall + wait (max of 5 minutes) - we don't actually care if BB is completely down
    # Goal is to make sure that at minimum LoadBalancer services are destroyed so that their ELBs are deleted
    - helm uninstall -n bigbang bigbang --wait --timeout 7m0s
  environment:
    name: review/aws-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}
  artifacts:
    paths:
      - events.txt
      - get_cpumem.txt
      - cluster_info_dump.txt
      - pod_logs
      - kubectl_describes
  retry:
    max: 2
    when:
      - unknown_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# Destroy RKE2 cluster on AWS
aws/rke2/cluster down:
  stage: ðŸ’£ cluster down
  extends:
    - .generic-runner-tags
    - .rke2 down
  needs:
    - job: aws/rke2/bigbang down
    - job: pre infra vars
      artifacts: true
  environment:
    name: review/aws-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}
  retry:
    max: 2
    when:
      - unknown_failure
      - stuck_or_timeout_failure
      - runner_system_failure

#-----------------------------------------------------------------------------------------------------------------------
#
# Infrastructure: AWS EKS
#
#-----------------------------------------------------------------------------------------------------------------------
# Create EKS cluster on AWS
aws/eks/cluster up:
  stage: âš“ cluster up
  extends:
    - .generic-runner-tags
    - .eks up
  needs:
    - job: aws/network up
    - job: pre infra vars
      artifacts: true
  environment:
    name: review/aws-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}
  retry:
    max: 2
    when:
      - unknown_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# Install BigBang on eks cluster on AWS
aws/eks/bigbang up:
  stage: ðŸŒŒ bigbang up
  extends:
    - .generic-runner-tags
    - .eks activated
    - .kubectl-output
    - .templates
  needs:
    - job: aws/eks/cluster up
      artifacts: true
    - job: pre infra vars
      artifacts: true
  variables:
    CI_VALUES_OVERRIDES_FILE: tests/eks-test-values.yaml
  script:
    # Ensure that the proper AWS account is being used.
    - pre_vars
    # Load the kube configure file
    - get_eks_kubeconfig
    - kubectl apply -f ${PIPELINE_REPO_DESTINATION}/clusters/eks/dependencies/k8s-resources/aws/default-ebs-sc.yaml
    # Delete gp2 storage class
    - kubectl delete storageclass gp2
    - kubectl get storageclass -o yaml
    - deploy_bigbang
  environment:
    name: review/aws-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}
  artifacts:
    paths:
      - events.txt
      - get_cpumem.txt
      - cluster_info_dump.txt
      - images.txt
      - pod_logs
      - kubectl_describes
      - "test-artifacts/"
    expire_in: 3 days
    when: always

# Run tests on BigBang on eks cluster on AWS
aws/eks/bigbang test:
  stage: ðŸ¤ž test
  extends:
    - .generic-runner-tags
    - .eks activated
    - .kubectl-output
    - .templates
  needs:
    - job: aws/eks/cluster up
      artifacts: true
    - job: aws/eks/bigbang up
    - job: pre infra vars
      artifacts: true
  script:
    # Ensure that the proper AWS account is being used.
    - pre_vars
    # Load the kube config file
    - get_eks_kubeconfig
    - test_bigbang
    - |
      if [[ $EXIT_FLAG -eq 1 ]]; then
        exit 123
      fi
  environment:
    name: review/aws-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}
  allow_failure:
    exit_codes: 123
  artifacts:
    paths:
      - events.txt
      - get_cpumem.txt
      - cluster_info_dump.txt
      - pod_logs
      - kubectl_describes
      - "test-artifacts/"
    expire_in: 3 days
    when: always

# Uninstall BigBang on eks cluster on AWS
aws/eks/bigbang down:
  stage: ðŸ’£ bigbang down
  extends:
    - .generic-runner-tags
    - .eks cleanup
    - .kubectl-output
    - .templates
  needs:
    - job: aws/eks/cluster up
      artifacts: true
    - job: aws/eks/bigbang up
    - job: pre infra vars
      artifacts: true
    - job: aws/eks/bigbang test
  script:
    # Ensure that the proper AWS account is being used.
    - pre_vars
    # Load the kube config file
    - get_eks_kubeconfig
    # Delete Istio HR first so that Istio Operator cleans up child resources (ELB from service)
    # Allow failure here since Istio might not be up
    - kubectl delete hr istio -n bigbang --wait || true
    - kubectl delete validatingwebhookconfiguration kyverno-policy-validating-webhook-cfg kyverno-resource-validating-webhook-cfg
    - kubectl delete mutatingwebhookconfiguration kyverno-policy-mutating-webhook-cfg kyverno-verify-mutating-webhook-cfg kyverno-resource-mutating-webhook-cfg monitoring-monitoring-kube-admission
    - kubectl scale deploy kyverno-kyverno -n kyverno --replicas 0
    - kubectl scale deploy kyverno-kyverno -n kyverno --replicas 3
    # Sleep to be sure webhook configurations are gone
    - sleep 2m
    # Helm uninstall + wait (max of 5 minutes) - we don't actually care if BB is completely down
    # Goal is to make sure that at minimum LoadBalancer services are destroyed so that their ELBs are deleted
    - helm uninstall -n bigbang bigbang --wait --timeout 7m0s
  environment:
    name: review/aws-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}
  artifacts:
    paths:
      - events.txt
      - get_cpumem.txt
      - cluster_info_dump.txt
      - pod_logs
      - kubectl_describes
  retry:
    max: 2
    when:
      - unknown_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# Destroy eks cluster on AWS
aws/eks/cluster down:
  stage: ðŸ’£ cluster down
  extends:
    - .generic-runner-tags
    - .eks down
  needs:
    - job: aws/eks/bigbang down
    - job: aws/eks/cluster up
    - job: pre infra vars
      artifacts: true
  environment:
    name: review/aws-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}


#-----------------------------------------------------------------------------------------------------------------------
#
# AIRGAP
#
#-----------------------------------------------------------------------------------------------------------------------

aws/airgap up:
  stage: âš“ airgap up
  extends:
    - .generic-runner-tags
    - .airgap up
  needs:
    - job: pre infra vars
      artifacts: true
  environment:
    name: review/aws-airgap-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}
    auto_stop_in: 1 hour
  retry:
    max: 2
    when:
      - unknown_failure
      - stuck_or_timeout_failure
      - runner_system_failure

aws/airgap/bigbang up:
  stage: ðŸŒŒ bigbang airgap up
  extends:
    - .generic-runner-tags
    - .kubectl-output
    - .airgap bb
  needs:
    - job: pre infra vars
      artifacts: true
    - job: aws/airgap up
      artifacts: true
  script:
    # Operational up to this point, see "before script"
    # flux install works, proving that the the airgap cluster is able to pull from the airgap registry
    # Work is needed to create an airgap values.yaml
    # must use the big bang chart pulled in the "before script" to prove repo artifacts (./bigbang)
    - kubectl get all -A
    #- deploy_bigbang
    #- test_bigbang
  environment:
    name: review/aws-airgap-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}

aws/airgap down:
  stage: ðŸ’£ airgap down
  extends:
    - .generic-runner-tags
    - .airgap down
    - .airgap cleanup
  needs:
    - job: pre infra vars
      artifacts: true
    - job: aws/airgap/bigbang up
      artifacts: true
  environment:
    name: review/aws-airgap-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}
    action: stop
  retry:
    max: 2
    when:
      - unknown_failure
      - stuck_or_timeout_failure
      - runner_system_failure

{{- define "bigbang.defaults.neuvector" -}}
# Includes suffix of "A1a" to ensure password always meets default minimum password requirements
{{- $neuvectorMetricsPass := join "" (list (randAlphaNum 12) (randAlpha 2 | upper) (randAlpha 2 | lower) (randNumeric 2))}}

# hostname is deprecated and replaced with domain. But if hostname exists then use it.
domain: {{ default .Values.domain .Values.hostname }}

openshift: {{ .Values.openshift }}

{{ $istioInjection := (and .Values.istio.enabled (eq (dig "istio" "injection" "enabled" .Values.neuvector) "enabled")) }}

istio:
  enabled: {{ .Values.istio.enabled }}
  neuvector:
    gateways:
    - istio-system/{{ default "public" .Values.neuvector.ingress.gateway }}
  injection: {{ ternary "enabled" "disabled" $istioInjection }}
  mtls:
    mode: PERMISSIVE

{{- if .Values.monitoring.enabled }}
monitoring:
  enabled: true

controller:
  podAnnotations:
    checksum/metrics-pass: {{ sha256sum $neuvectorMetricsPass }}
  secret:
    enabled: true
    data: 
      # This configuration is read in at deploy time and users are created.
      userinitcfg.yaml:
        always_reload: true
        users:
        - username: metrics
          password: {{ $neuvectorMetricsPass }}
          role: reader
          fullname: metrics
    
monitor:
  install: true
  exporter:
    enabled: true
    serviceMonitor:
      enabled: true
    svc:
      enabled: true
      type: ClusterIP
    CTRL_USERNAME: metrics
    CTRL_PASSWORD: {{ $neuvectorMetricsPass }}
{{- end }}

{{- if .Values.istio.enabled }}
manager:
  env:
    ssl: false
{{- end }}

networkPolicies:
  enabled: {{ .Values.networkPolicies.enabled }}
  controlPlaneCidr: {{ .Values.networkPolicies.controlPlaneCidr }}
  ingressLabels:
    {{- $gateway := default "public" .Values.neuvector.ingress.gateway }}
    {{- $default := dict "app" (dig "gateways" $gateway "ingressGateway" nil .Values.istio) "istio" nil }}
    {{- toYaml (dig "values" "gateways" $gateway "selector" $default .Values.istio) | nindent 4 }}
{{- end }}

{{- /* Create secret */ -}}
{{- if .Values.neuvector.enabled }}
{{- include "values-secret" (dict "root" $ "package" .Values.neuvector "name" "neuvector" "defaults" (include "bigbang.defaults.neuvector" .)) }}
{{- end }}

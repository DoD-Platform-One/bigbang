{{- if .Values.addons.mattermost.enabled }}
{{- include "values-secret" (dict "root" $ "package" .Values.addons.mattermost "name" "mattermost" "defaults" (include "bigbang.defaults.mattermost" .)) }}
{{- end }}

{{- define "bigbang.defaults.mattermost" -}}
# hostname is deprecated and replaced with domain. But if hostname exists then use it.
{{- $domainName := default .Values.domain .Values.hostname }}
hostname: {{ $domainName }}
domain: {{ $domainName }}

openshift: {{ .Values.openshift }}

image:
  imagePullPolicy: {{ .Values.imagePullPolicy }}

{{ $istioInjection := (and .Values.istio.enabled (eq (dig "istio" "injection" "enabled" .Values.addons.mattermost) "enabled")) }}

istio:
  enabled: {{ .Values.istio.enabled }}
  chat:
    gateways:
    - istio-system/{{ default "public" .Values.addons.mattermost.ingress.gateway }}
  injection: {{ ternary "enabled" "disabled" $istioInjection }}
  hardened:
    enabled: {{ or
      (dig "istio" "hardened" "enabled" false .Values.addons.mattermost.values)
      (dig "hardened" "enabled" false .Values.istio.values)
    }}
    clusterAuditor:
      enabled: {{ .Values.clusterAuditor.enabled }}
    kyvernoReporter:
      enabled: {{ .Values.kyvernoReporter.enabled }}

{{- if .Values.kiali.enabled }}
podLabels:
  {{- include "kialiAppLabel" . | nindent 2 }}
  {{- include "kialiVersionLabel" . | nindent 2 }}
{{- end }}

{{- if $istioInjection }}
podAnnotations:
  {{ include "istioAnnotation" . }}
updateJob:
  disabled: true
{{- end }}

monitoring:
  enabled: {{ .Values.monitoring.enabled }}

  serviceMonitor:
    enabled: {{ .Values.monitoring.enabled }}
    # conditional passes only for default istio: enabled, mTLS: STRICT
    {{- if and .Values.istio.enabled (eq (dig "istio" "mtls" "mode" "STRICT" .Values.addons.mattermost) "STRICT") }}
    scheme: https
    tlsConfig:
      caFile: /etc/prom-certs/root-cert.pem
      certFile: /etc/prom-certs/cert-chain.pem
      keyFile: /etc/prom-certs/key.pem
      insecureSkipVerify: true  # Prometheus does not support Istio security naming, thus skip verifying target pod certificate
    {{- end }}

{{- with .Values.addons.mattermost.sso }}
sso:
  enabled: {{ .enabled }}
  client_id: {{ .client_id }}
  client_secret: {{ .client_secret | default "no-secret" }}
  auth_endpoint: {{ default (include "sso.oidc.auth" $) .auth_endpoint }}
  token_endpoint: {{ default (include "sso.oidc.token" $) .token_endpoint }}
  user_api_endpoint: {{ default (include "sso.oidc.userinfo" $) .user_api_endpoint }}
  {{- list "enable_sign_up_with_email" .enable_sign_up_with_email | include "bigbang.addValueIfSet" | indent 2 }}
  {{- list "enable_sign_in_with_email" .enable_sign_in_with_email | include "bigbang.addValueIfSet" | indent 2 }}
  {{- list "enable_sign_in_with_username" .enable_sign_in_with_username | include "bigbang.addValueIfSet" | indent 2 }}
{{- end }}

networkPolicies:
  enabled: {{ .Values.networkPolicies.enabled }}
  controlPlaneCidr: {{ .Values.networkPolicies.controlPlaneCidr }}
  ingressLabels:
    {{- $gateway := default "public" .Values.addons.mattermost.ingress.gateway }}
    {{- $default := dict "app" (dig "gateways" $gateway "ingressGateway" nil .Values.istio) "istio" nil }}
    {{- toYaml (dig "values" "gateways" $gateway "selector" $default .Values.istio) | nindent 4 }}

global:
  imagePullSecrets:
    - name: private-registry

{{- with .Values.addons.mattermost.enterprise }}
enterprise:
  enabled: {{ .enabled }}
  license: {{ .license }}
{{- end }}

{{- with .Values.addons.mattermost.database }}
{{- if and .username .password .host .port .database }}
database:
  secret: "mattermost-database-secret"
postgresql:
  secret: "mattermost-database-secret"
{{- else }}
postgresql:
  image:
    pullSecrets:
      - private-registry
  {{- if and .username .password .host .port .database }}
  secret: "mattermost-database-secret"
  {{- else }}
  secret: "mattermost-dbcreds"
  {{- end }}
  install: true
  {{- if $istioInjection }}
  primary:
    {{- if $.Values.kiali.enabled }}
    podLabels:
      app: {{ "{{ template \"postgresql.v1.primary.fullname\" . }}" | quote }}
      {{- include "kialiVersionLabel" $ | nindent 6 }}
    {{- end }}
    podAnnotations:
      {{ include "istioAnnotation" $ }}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      runAsUser: 1001
      runAsGroup: 1001
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      capabilities:
        drop:
          - ALL
    #permissions for initContainers
    volumePermissions:
      securityContext:
        capabilities:
          drop:
            - ALL
  readReplicas:
    {{- if $.Values.kiali.enabled }}
    podLabels:
      app: {{ "{{ template \"postgresql.v1.readReplica.fullname\" . }}" | quote }}
      {{- include "kialiVersionLabel" $ | nindent 6 }}
    {{- end }}
    podAnnotations:
      {{ include "istioAnnotation" $ }}
  {{- end }}
{{- end }}
{{- end }}

{{- with .Values.addons.mattermost.objectStorage }}
{{- if and .endpoint .accessKey .accessSecret .bucket }}
fileStore:
  secret: "mattermost-objectstorage-secret"
  url: {{ .endpoint }}
  bucket: {{ .bucket }}
{{- else }}
minio:
  install: true
  accessKey: {{ .accessKey | default "minio" }}
  secretKey: {{ .secretKey | default "BigBangDEVONLY" }}
  imagePullSecrets:
    - name: private-registry
  tenants:
    metrics:
      enabled: {{ $.Values.monitoring.enabled }}
  {{- if $istioInjection }}
  annotations:
    {{ include "istioAnnotation" $ }}
  {{- end }}
{{- end }}
{{- end }}

{{- if .Values.addons.mattermost.elasticsearch.enabled }}
elasticsearch:
  enabled: true
{{- end }}

mattermostEnvs:
  # required for Keycloak >= 20.X to work with gitlab auth pointed to Keycloak
  MM_GITLABSETTINGS_SCOPE: openid

{{- end -}}

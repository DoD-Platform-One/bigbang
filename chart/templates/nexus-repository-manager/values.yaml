{{- $nexusOldValues := default dict .Values.addons.nexus -}}
{{- $nexusValues := merge $nexusOldValues .Values.addons.nexusRepositoryManager -}}
{{- if $nexusValues.enabled  }}
{{- include "values-secret" (dict "root" $ "package" $nexusValues "name" "nexus-repository-manager" "defaults" (include "bigbang.defaults.nexus-repository-manager" .)) }}
{{- end }}

{{- define "bigbang.defaults.nexus-repository-manager" -}}
{{- $nexusOldValues := default dict .Values.addons.nexus -}}
{{- $nexusValues := merge $nexusOldValues .Values.addons.nexusRepositoryManager -}}
{{- $domainName := default .Values.domain .Values.hostname }}
domain: {{ $domainName }}
hostname: nexus
istio:
  enabled: {{ .Values.istio.enabled }}
  injection: {{ dig "istio" "injection" "enabled" $nexusValues }}
  nexus:
    gateways:
    - istio-system/{{ default "public" $nexusValues.ingress.gateway }}

openshift: {{ .Values.openshift }}

image:
  pullPolicy: {{ .Values.imagePullPolicy }}

job_image:
  pullPolicy: {{ .Values.imagePullPolicy }}
  
monitoring:
  enabled: {{ .Values.monitoring.enabled }}
  serviceMonitor:
    createMetricsUser: {{ .Values.monitoring.enabled }}
  {{- if and .Values.istio.enabled (eq (dig "istio" "mtls" "mode" "STRICT" .Values.addons.velero.values) "STRICT") }}
    scheme: https
    tlsConfig:
      caFile: /etc/prom-certs/root-cert.pem
      certFile: /etc/prom-certs/cert-chain.pem
      keyFile: /etc/prom-certs/key.pem
      insecureSkipVerify: true  # Prometheus does not support Istio security naming, thus skip verifying target
  {{- end }}

networkPolicies:
  enabled: {{ .Values.networkPolicies.enabled }}
  ingressLabels:
    {{- $gateway := default "public" $nexusValues.ingress.gateway }}
    {{- $default := dict "app" (dig "gateways" $gateway "ingressGateway" nil .Values.istio) "istio" nil }}
    {{- toYaml (dig "values" "gateways" $gateway "selector" $default .Values.istio) | nindent 4 }}

nexus:
  imagePullSecrets:
    - name: private-registry
  {{- if .Values.istio.enabled }}
  podAnnotations:
    {{ include "istioAnnotation" . }}
  {{- end }}
  {{- if $nexusValues.license_key }}
  properties:
    override: true
    data: 
      nexus.licenseFile: /nexus-data/sonatype-license.lic
  {{- end }}

license_key: "{{ $nexusValues.license_key }}"

{{- if $nexusValues.sso.enabled }}
sso:
  enabled: {{ $nexusValues.sso.enabled }}
  idp_data:
    {{- if $nexusValues.sso.idp_data.entityId }}
    entityId: {{ $nexusValues.sso.idp_data.entityId }}
    {{- else }}
    entityId: "https://nexus.{{ $domainName }}/service/rest/v1/security/saml/metadata"
    {{- end }}
    usernameAttribute: "{{ default "username" $nexusValues.sso.idp_data.username }}"
    firstNameAttribute: "{{ default "firstName" $nexusValues.sso.idp_data.firstName }}"
    lastNameAttribute: "{{ default "lastName" $nexusValues.sso.idp_data.lastName }}"
    emailAttribute: "{{ default "email" $nexusValues.sso.idp_data.email }}"
    groupsAttribute: "{{ default "groups" $nexusValues.sso.idp_data.groups }}"
    validateResponseSignature: "true"
    validateAssertionSignature: "true"
    idpMetadata: '{{ default (dig "saml" "metadata" "" .Values.sso) (dig "sso" "idp_data" "idpMetadata" "" $nexusValues) }}'
  realm:
    - "NexusAuthenticatingRealm"
    - "NexusAuthorizingRealm"
    - "SamlRealm"
  role:
    {{- range $nexusValues.sso.role }}
    - id: {{ .id | quote }}
      name: {{ .name | quote }}
      description: {{ .description | quote }}
      privileges: 
        {{- range .privileges }}
        - {{ . | quote }}
        {{- else }} []
        {{- end }}
      roles: 
        {{- range .roles }}
        - {{ . | quote }}
        {{- else }} []
        {{- end }}
    {{- end }}

{{- end }}
{{- end -}}

{{- $name := "disallow-image-tags" }}
{{- if and .Values.enabled (dig $name "enabled" false .Values.policies) }}
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: {{ $name }}
  annotations:
    policies.kyverno.io/title: Disallow Image Tags
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/severity: {{ default "medium" (dig $name "severity" nil .Values.policies) }}
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      Mutable tags, like 'latest', can lead to unexpected errors if the
      image changes. A best practice is to use an immutable tag that maps to
      a specific version of an application Pod. This policy validates that the image
      specifies a tag and that it is not in the list of disallowed tags.
  labels: {{- include "kyverno-policies.labels" . | nindent 4 }}
spec:
  {{- include "kyverno-policies.webhookTimeoutSeconds" (merge (dict "name" $name) .) | indent 2 }}
  validationFailureAction: {{ default (dig $name "validationFailureAction" nil .Values.policies) .Values.validationFailureAction }}
  rules:
  - name: require-image-tag
    {{- include "kyverno-policies.exclude" (merge (dict "name" $name) .) | indent 4 }}
    {{- include "kyverno-policies.match" (merge (dict "name" $name "kinds" (list "Pod")) .) | nindent 4 }}
    {{- include "kyverno-policies.precondition.default" . | nindent 4 }}
    validate:
      message: "Images without tags are mutable and not allowed."
      pattern:
        spec:
          containers:
          - image: "*:*"
          =(initContainers):
          - image: "*:*"
          =(ephemeralContainers):
          - image: "*:*"
  - name: validate-image-tag
    {{- include "kyverno-policies.exclude" (merge (dict "name" $name) .) | indent 4 }}
    {{- include "kyverno-policies.match" (merge (dict "name" $name "kinds" (list "Pod")) .) | nindent 4 }}
    {{- include "kyverno-policies.precondition.default" . | nindent 4 }}
    validate:
      message: "Using a mutable image tag e.g. 'latest' is not allowed."
      pattern:
        spec:
          containers:
          - image: "!*:{{ (dig $name "parameters" "disallow" nil .Values.policies) | join " & !*:" }}"
          =(initContainers):
          - image: "!*:{{ (dig $name "parameters" "disallow" nil .Values.policies) | join " & !*:" }}"
          =(ephemeralContainers):
          - image: "!*:{{ (dig $name "parameters" "disallow" nil .Values.policies) | join " & !*:" }}"
{{- end -}}

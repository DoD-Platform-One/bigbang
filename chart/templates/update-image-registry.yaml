{{- $name := "update-image-registry" }}
{{- if and .Values.enabled (dig $name "enabled" false .Values.policies) }}
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: {{ $name }}
  annotations:
    policies.kyverno.io/title: Replace Image Registry
    policies.kyverno.io/category: Helper
    policies.kyverno.io/severity: {{ default "medium" (dig $name "severity" nil .Values.policies) }}
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/minversion: 1.3.6
    policies.kyverno.io/description: >-
      It is common practice to pull images from a local proxy or approved registry.  This
      policy will mutate existing image registries so pulls are directed to desired registries.
  labels: {{- include "kyverno-policies.labels" . | nindent 4 }}
spec:
  {{- include "kyverno-policies.webhookTimeoutSeconds" (merge (dict "name" $name) .) | indent 2 }}
  rules:
  {{- $index := 0 }}
  {{- range $v := (dig $name "parameters" "update" nil .Values.policies) }}
  {{- $index = add1 $index }}
  - name: {{ printf "%s-containers-%d" $name $index }}
    {{- include "kyverno-policies.exclude" (merge (dict "name" $name) $) | indent 4 }}
    {{- include "kyverno-policies.match" (merge (dict "name" $name "kinds" (list "Pod")) $) | nindent 4 }}
    {{- include "kyverno-policies.precondition.default" . | nindent 4 }}
    mutate:
      patchStrategicMerge:
        spec:
          containers:
          - (name): "*"
            image: |-
              {{ "{{" }} regex_replace_all('{{ $v.from }}', '{{"{{"}}@{{"}}"}}', '{{ $v.to }}') {{ "}}" }}
  - name: {{ printf "%s-initcontainers-%d" $name $index }}
    {{- include "kyverno-policies.exclude" (merge (dict "name" $name) $) | indent 4 }}
    {{- include "kyverno-policies.match" (merge (dict "name" $name "kinds" (list "Pod")) $) | nindent 4 }}
    preconditions:
      all:
      {{- include "kyverno-policies.precondition.create-update" . | nindent 6 }}
      - key: "{{"{{"}} not_null(request.object.spec.initContainers[], '') | length(@) {{"}}"}}"
        operator: GreaterThanOrEquals
        value: 1
    mutate:
      patchStrategicMerge:
        spec:
          initContainers:
          - (name): "*"
            image: |-
              {{ "{{" }} regex_replace_all('{{ $v.from }}', '{{"{{"}}@{{"}}"}}', '{{ $v.to }}') {{ "}}" }}
  - name: {{ printf "%s-ephemeralcontainers-%d" $name $index }}
    {{- include "kyverno-policies.exclude" (merge (dict "name" $name) $) | indent 4 }}
    {{- include "kyverno-policies.match" (merge (dict "name" $name "kinds" (list "Pod")) $) | nindent 4 }}
    preconditions:
      all:
      {{- include "kyverno-policies.precondition.create-update" . | nindent 6 }}
      - key: "{{"{{"}} not_null(request.object.spec.ephemeralContainers[], '') | length(@) {{"}}"}}"
        operator: GreaterThanOrEquals
        value: 1
    mutate:
      patchStrategicMerge:
        spec:
          ephemeralContainers:
          - (name): "*"
            image: |-
              {{ "{{" }} regex_replace_all('{{ $v.from }}', '{{"{{"}}@{{"}}"}}', '{{ $v.to }}') {{ "}}" }}
  {{- end }}
{{- end -}}
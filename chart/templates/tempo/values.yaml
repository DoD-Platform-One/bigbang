{{- if .Values.tempo.enabled }}
{{- include "values-secret" (dict "root" $ "package" .Values.tempo "name" "tempo" "defaults" (include "bigbang.defaults.tempo" .)) }}
{{- end }}

{{- define "bigbang.defaults.tempo" -}}
{{- $istioEnabled := eq (include "istioEnabled" .) "true" }}

{{- if $istioEnabled }}
podAnnotations:
  {{ include "istioAnnotation" . }}
{{- end }}

objectStorage: 
  access_key_id: {{ .Values.tempo.objectStorage.accessKey }}
  secret_access_key: {{ .Values.tempo.objectStorage.accessSecret }}

tempo:
  pullPolicy: {{ .Values.imagePullPolicy }}
  global_overrides:
    ingestion_rate_limit_bytes: 30000000
{{- with .Values.tempo.objectStorage }}
{{- if and .endpoint .region .bucket }}
  storage: 
    trace:
      backend: s3
      s3:
        endpoint: {{ .endpoint }}
        bucket: {{ .bucket }}
        region: {{ .region }}
        insecure: {{ .insecure }}
        forcepathstyle: true
{{- end }}
{{- end }}

{{- if .Values.monitoring.enabled }}
  metricsGenerator:
    enabled: true
    remoteWriteUrl: "http://monitoring-monitoring-kube-prometheus.monitoring.svc.cluster.local:9090/api/v1/write"
{{- end }}

# hostname is deprecated and replaced with domain. But if hostname exists then use it.
{{- $domainName := default .Values.domain .Values.hostname }}
hostname: {{ $domainName }}
domain: {{ $domainName }}

tempoQuery:
  pullPolicy: {{ .Values.imagePullPolicy }}

serviceAccount:
  imagePullSecrets:
    - name: private-registry

networkPolicies:
  enabled: {{ .Values.networkPolicies.enabled }}
  istioNamespaceSelector:
  {{ include "istioNamespaceSelector" . | nindent 4 }}
  controlPlaneCidr: {{ .Values.networkPolicies.controlPlaneCidr }}
  ingressLabels:
    {{- if $istioEnabled }}
    {{- include "getGatewaySelector" (dict "pkg" .Values.tempo "root" .) | nindent 4 }}
    {{- end }}

istio:
  enabled: {{ $istioEnabled }}
  hardened:
    enabled: {{ or
      (dig "istio" "hardened" "enabled" false .Values.tempo.values)
      (dig "hardened" "enabled" false .Values.istio.values)
    }}
  tempoQuery:
    # Set TempoQuery UI to "tempo." if Jaeger is enabled
    {{- if .Values.jaeger.enabled }}
    hosts:
      - "tempo.{{ .Values.domain }}"
    {{- end }}
    gateways:
      - {{ include "getGatewayName" (dict "gateway" .Values.tempo.ingress.gateway "root" .)}}

monitoring:
  enabled: {{ .Values.monitoring.enabled }}

serviceMonitor:
  enabled: {{ .Values.monitoring.enabled }}
  # conditional passes only if all conditionals are true:
  # - istio: enabled
  # - mTLS: SCRICT
  {{- if and $istioEnabled (eq (dig "istio" "mtls" "mode" "STRICT" .Values.tempo.values) "STRICT") }}
  scheme: https
  tlsConfig:
    caFile: /etc/prom-certs/root-cert.pem
    certFile: /etc/prom-certs/cert-chain.pem
    keyFile: /etc/prom-certs/key.pem
    insecureSkipVerify: true  # Prometheus does not support Istio security naming, thus skip verifying target pod certificate
  {{- end }}

sso:
  enabled: {{ .Values.tempo.sso.enabled }}

{{- if or .Values.kiali.enabled .Values.tempo.sso.enabled }}
{{- $tempoAuthserviceKey := (dig "selector" "key" "protect" .Values.addons.authservice.values) }}
{{- $tempoAuthserviceValue := (dig "selector" "value" "keycloak" .Values.addons.authservice.values) }}
podLabels:
  {{- if .Values.tempo.sso.enabled }}
  {{ $tempoAuthserviceKey }}: {{ $tempoAuthserviceValue }}
  {{- end }}
{{- end }}

{{- end -}}

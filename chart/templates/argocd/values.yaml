{{- if .Values.addons.argocd.enabled }}
{{- include "values-secret" (dict "root" $ "package" .Values.addons.argocd "name" "argocd" "defaults" (include "bigbang.defaults.argocd" .)) }}
{{- end }}

{{- define "bigbang.defaults.argocd" -}}
{{- $istioEnabled := eq (include "istioEnabled" .) "true" }}
{{- $istioInjection := and $istioEnabled (eq (dig "istio" "injection" "enabled" .Values.addons.argocd) "enabled") }}
# hostname is deprecated and replaced with domain. But if hostname exists then use it.
{{- $domainName := default .Values.domain .Values.hostname }}
hostname: {{ $domainName }}
domain: {{ $domainName }}

redis-bb:
  networkPolicy:
    enabled: {{ .Values.networkPolicies.enabled }}
  {{- if and .Values.addons.argocd.redis.host .Values.addons.argocd.redis.port }}
  enabled: false
  {{- else }}
  enabled: true
  {{- end }}
  image:
    pullPolicy: {{ .Values.imagePullPolicy }}
  auth:
    enabled: false
  {{- if .Values.monitoring.enabled }}
  metrics:
    enabled: true
    image:
      pullSecrets:
        - private-registry
    serviceMonitor:
      enabled: true
      namespace: argocd
      selector:
        app.kubernetes.io/name: redis-bb
        app.kubernetes.io/instance: argocd-argocd
      # conditional passes only for default istio: enabled, mTLS: SCRICT, istio injection: enabled
      {{- if and $istioInjection (eq (dig "istio" "mtls" "mode" "STRICT" .Values.addons.argocd.values) "STRICT") }}
      scheme: https
      tlsConfig:
        caFile: /etc/prom-certs/root-cert.pem
        certFile: /etc/prom-certs/cert-chain.pem
        keyFile: /etc/prom-certs/key.pem
        insecureSkipVerify: true
      {{- end }}

    prometheusRule:
      enabled: true
      namespace: monitoring
  {{- end }}
{{- if $istioInjection }}
  master:
    podAnnotations:
      {{ include "istioAnnotation" . }}
  replica:
    podAnnotations:
      {{ include "istioAnnotation" . }}
{{- end }}

createNamespace: false

global:
  {{- $argocdHosts := (dig "istio" "argocd" "hosts" dict .Values.addons.argocd.values) }}
  {{- if $argocdHosts }}
  domain: {{ tpl ($argocdHosts | first) $ }}
  {{- else }}
  domain: argocd.{{ $domainName }}
  {{- end }}
  image:
    imagePullPolicy: {{ .Values.imagePullPolicy }}
  imagePullSecrets:
    - name: private-registry
{{- if $istioInjection }}
  podAnnotations:
    {{ include "istioAnnotation" . }}
{{- end }}

istio:
  enabled: {{ $istioEnabled }}
  hardened:
    enabled: {{ or
      (dig "istio" "hardened" "enabled" false .Values.addons.argocd.values)
      (dig "hardened" "enabled" false .Values.istiod.values)
    }}
  injection: {{ dig "istio" "injection" "enabled" .Values.addons.argocd }}
  argocd:
    gateways:
      - {{ include "getGatewayName" (dict "gateway" .Values.addons.argocd.ingress.gateway "root" .)}}

monitoring:
  enabled: {{ .Values.monitoring.enabled }}

networkPolicies:
  enabled: {{ .Values.networkPolicies.enabled }}
  istioNamespaceSelector:
  {{ include "istioNamespaceSelector" . | nindent 4 }}
  controlPlaneCidr: {{ .Values.networkPolicies.controlPlaneCidr }}
  ingressLabels:
    {{- include "getGatewaySelector" (dict "pkg" .Values.addons.argocd "root" .) | nindent 4 }}


upstream:
  {{- if .Values.addons.argocd.redis.host }}
  externalRedis: 
    host: {{ default "argocd-argocd-redis-bb-headless.argocd.svc.cluster.local" .Values.addons.argocd.redis.host }}
    port: {{ default 6379 .Values.addons.argocd.redis.port }}
  {{- end }}
  {{- if .Values.addons.argocd.sso.enabled }}
  configs:
    cm:
      oidc.config: |
        name: {{ default .Values.sso.name .Values.addons.argocd.sso.provider_name }}
        issuer: {{ include "sso.url" . }}
        clientID: {{ .Values.addons.argocd.sso.client_id }}
        clientSecret: {{ .Values.addons.argocd.sso.client_secret }}
        requestedScopes: ["openid","ArgoCD"]
        {{- if (or .Values.sso.certificate_authority (dig "certificateAuthority" "cert" false .Values.sso)) }}
        rootCA: |
          {{- default (dig "certificateAuthority" "cert" "" .Values.sso) .Values.sso.certificate_authority | nindent 10 }}
        {{- end }}
    {{- if .Values.addons.argocd.sso.groups }}
    rbac:
      policy.csv: |
        {{- .Values.addons.argocd.sso.groups | nindent 8 }}
    {{- end }}
    {{- if .Values.addons.argocd.sso.client_secret }}
    secret:
      extra:
        keycloakClientSecret: {{ .Values.addons.argocd.sso.client_secret }}
    {{- end }} 
  {{- end }}
  openshift:
    enabled: {{ .Values.openshift }}

  controller:
    image:
      imagePullPolicy: {{ .Values.imagePullPolicy }}
    imagePullSecrets:
      - name: private-registry
    # conditional passes only for default istio: enabled, mTLS: SCRICT, istio injection: enabled
    {{- if and $istioInjection (eq (dig "istio" "mtls" "mode" "STRICT" .Values.addons.argocd.values) "STRICT") }}
    metrics:
      serviceMonitor:
        scheme: https
        tlsConfig:
          caFile: /etc/prom-certs/root-cert.pem
          certFile: /etc/prom-certs/cert-chain.pem
          keyFile: /etc/prom-certs/key.pem
          insecureSkipVerify: true
    {{- end }}
  
  dex:
    image:
      imagePullPolicy: {{ .Values.imagePullPolicy }}
    imagePullSecrets:
      - name: private-registry
  
  server:
    image:
      imagePullPolicy: {{ .Values.imagePullPolicy }}
    autoscaling:
      enabled: true
    config:
      # Must be enabled for plugins included in PlatformOne image.
      kustomize.buildOptions: "--enable-alpha-plugins"
    # conditional passes only for default istio: enabled, mTLS: SCRICT, istio injection: enabled
    {{- if and $istioInjection (eq (dig "istio" "mtls" "mode" "STRICT" .Values.addons.argocd.values) "STRICT") }}
    metrics:
      serviceMonitor:
        scheme: https
        tlsConfig:
          caFile: /etc/prom-certs/root-cert.pem
          certFile: /etc/prom-certs/cert-chain.pem
          keyFile: /etc/prom-certs/key.pem
          insecureSkipVerify: true
    {{- end }}
  
  repoServer:
    image:
      imagePullPolicy: {{ .Values.imagePullPolicy }}
    autoscaling:
      enabled: true
    # conditional that will attach the argocd-iam-secret environment variables containing AWS credentials from argocd values for SOPS on the repo-server deployment.
    {{- $awskeyid := dig "addons" "argocd" "values" "awsCredentials" "awsAccessKeyId" false (.Values | merge (dict)) }}
    {{- $awssecret := dig "addons" "argocd" "values" "awsCredentials" "awsSecretAccessKey" false (.Values | merge (dict)) }}
    {{- if and $awskeyid $awssecret }}
    envFrom:
    - secretRef:
        name: argocd-iam-secret
    {{- end }}     
    # conditional passes only for default istio: enabled, mTLS: SCRICT, istio injection: enabled
    {{- if and $istioInjection (eq (dig "istio" "mtls" "mode" "STRICT" .Values.addons.argocd.values) "STRICT") }}
    metrics:
      serviceMonitor:
        scheme: https
        tlsConfig:
          caFile: /etc/prom-certs/root-cert.pem
          certFile: /etc/prom-certs/cert-chain.pem
          keyFile: /etc/prom-certs/key.pem
          insecureSkipVerify: true
    {{- end }}

{{- end -}}


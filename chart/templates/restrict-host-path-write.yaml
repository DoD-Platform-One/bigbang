{{- $name := "restrict-host-path-write" }}
{{- if and .Values.enabled (dig $name "enabled" false .Values.policies) }}
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: {{ $name }}
  annotations:
    policies.kyverno.io/title: Restrict hostPath Volume Writable Paths
    policies.kyverno.io/category: Best Practices (Security)
    policies.kyverno.io/severity: {{ default "medium" (dig $name "severity" nil .Values.policies) }}
    policies.kyverno.io/minversion: 1.5.0
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      hostPath volumes consume the underlying node's file system. If hostPath volumes
      are not universally disabled, they should be required to be read-only.
      Pods which are allowed to mount hostPath volumes in read/write mode pose a security risk
      even if confined to a "safe" file system on the host and may escape those confines (see
      https://blog.aquasec.com/kubernetes-security-pod-escape-log-mounts). This policy
      checks containers for hostPath volumes and validates they are explicitly mounted
      in readOnly mode.  It is strongly recommended to pair this policy with another
      to restrict the path of hostPath volumes to a known list.
  labels: {{- include "kyverno-policies.labels" . | nindent 4 }}
spec:
  {{- include "kyverno-policies.webhookTimeoutSeconds" (merge (dict "name" $name) .) | indent 2 }}
  validationFailureAction: {{ default (dig $name "validationFailureAction" nil .Values.policies) .Values.validationFailureAction }}
  rules:
  - name: require-readonly-hostpath
    {{- include "kyverno-policies.exclude" (merge (dict "name" $name) .) | indent 4 }}
    {{- include "kyverno-policies.match" (merge (dict "name" $name "kinds" (list "Pod")) .) | nindent 4 }}
    {{- include "kyverno-policies.precondition.default" . | nindent 4 }}
    validate:
      message: hostPath volumes must be mounted as readOnly.
      foreach:
      # Fetch all volumes in the Pod which are a hostPath. Store the names in an array. There could be multiple in a Pod so can't assume just one.
      - list: "request.object.spec.volumes[?hostPath][]"
        deny:
          conditions:
            all:
            # For every name found for a hostPath volume (stored as `{{ "{{" }}element{{ "}}" }}`), check all containers, initContainers, and ephemeralContainers which mount this volume and
            # total up the number of them. Compare that to the ones with that same name which explicitly specify that `readOnly: true`. If these two
            # counts aren't equal, deny the Pod because at least one is attempting to mount that hostPath in read/write mode. Note that the absence of
            # the `readOnly: true` field implies read/write access. Therefore, every hostPath volume must explicitly specify that it should be mounted
            # in readOnly mode, regardless of where that occurs in a Pod.
            - key: "{{ "{{" }} request.object.spec.[containers, initContainers, ephemeralContainers][].volumeMounts[?name == '{{ "{{" }}element.name{{ "}}" }}'][] | length(@) {{ "}}" }}"
              operator: NotEquals
              value: "{{ "{{" }} request.object.spec.[containers, initContainers, ephemeralContainers][].volumeMounts[?name == '{{ "{{" }}element.name{{ "}}" }}' && readOnly] [] | length(@) {{ "}}" }}"
            {{- if (dig $name "parameters" "allow" nil .Values.policies) }}
            - key: "{{ "{{" }} element.hostPath.path {{ "}}" }}"
              operator: AnyNotIn
              value:
                {{ toYaml (dig $name "parameters" "allow" nil .Values.policies) | nindent 16 }}
            {{- end }}
{{- end -}}
{{- $istioEnabled := eq (include "istioEnabled" .) "true" }}
{{- if and $istioEnabled (or .Values.addons.authservice.enabled (and .Values.monitoring.enabled .Values.monitoring.sso.enabled) (and .Values.tempo.enabled .Values.tempo.sso.enabled) (and .Values.addons.thanos.enabled .Values.addons.thanos.sso.enabled)) }}
{{- include "values-secret" (dict "root" $ "package" .Values.addons.authservice "name" "authservice" "defaults" (include "bigbang.defaults.authservice" .)) }}
{{- end }}

{{- define "bigbang.defaults.authservice" -}}
{{- $istioEnabled := eq (include "istioEnabled" .) "true" }}
# hostname is deprecated and replaced with domain. But if hostname exists then use it.
{{- $domainName := default .Values.domain .Values.hostname }}
{{- $authServiceHardened := or
    (dig "istio" "hardened" "enabled" false .Values.monitoring.values)
    (dig "istio" "hardened" "enabled" false .Values.addons.authservice.values)
    (dig "hardened" "enabled" false .Values.istiod.values)
    (dig "istio" "hardened" "enabled" false .Values.grafana.values)
    (dig "istio" "hardened" "enabled" false .Values.loki.values)
    (dig "istio" "hardened" "enabled" false .Values.eckOperator.values)
    (dig "istio" "hardened" "enabled" false .Values.elasticsearchKibana.values)
}}

istio:
  enabled: {{ $istioEnabled }}
  hardened:
    enabled: {{ $authServiceHardened }}
  clusterWideHardenedEnabled: {{ dig "hardened" "enabled" false .Values.istiod.values }}

image: 
  pullPolicy: {{ .Values.imagePullPolicy | default "IfNotPresent" }}
  
imagePullSecrets:
  - name: private-registry

podAnnotations:
  {{ include "istioAnnotation" . }}

openshift: {{ .Values.openshift | default false }}

monitoring:
  enabled: {{ .Values.monitoring.enabled | default false }}

networkPolicies:
  enabled: {{ .Values.networkPolicies.enabled | default false }}
  ingress:
    definitions:
      keycloak-protected-pods:
        from:
          - namespaceSelector: {}
            podSelector:
              matchLabels:
                {{- $Key := (dig "selector" "key" "protect" .Values.addons.authservice.values) }}
                {{- $Value := (dig "selector" "value" "keycloak" .Values.addons.authservice.values) }}
                {{ $Key }}: {{ $Value }}
    to:
      # gRPC connections for pods with protect=keycloak label
      authservice:10003:
        from:
          definition:
            keycloak-protected-pods: true
      # Grafana redis client connection
      redis-bb:6379:
        from:
          k8s:
            monitoring/grafana: {{ .Values.monitoring.enabled }}
      haproxy:8080:
        from:
          k8s:
            "istio-gateway/*": {{ .Values.addons.haproxy.enabled }}
      # Redis exporter metrics
      redis-bb:9121:
        from:
          k8s:
            monitoring/prometheus: {{ .Values.monitoring.enabled }}
  egress:
    definitions:
      sso:
        {{ toYaml .Values.networkPolicies.egress.definitions.sso | nindent 8 }}

    from:
      authservice:
        to:
          definition:
            sso: true
          k8s:
            # Tempo trace data
            tempo/tempo:9411: {{ .Values.tempo.enabled }}
      haproxy:
        to:
          k8s:
            monitoring/alertmanager:9093: {{ .Values.addons.haproxy.enabled }}
            monitoring/prometheus:9090: {{ .Values.addons.haproxy.enabled }}

{{- if or (dig "redis" "enabled" false .Values.addons.authservice.values) (dig "global" "redis_server_uri" "" .Values.addons.authservice.values) }}
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 3
{{- end }}

{{- if and (dig "redis" "enabled" false .Values.addons.authservice.values) (or .Values.monitoring.enabled .Values.kiali.enabled) }}
redis-bb:
  {{- if .Values.monitoring.enabled }}
  metrics:
    enabled: true 
    image:
      pullSecrets:
        - private-registry
    serviceMonitor:
      enabled: true
      namespace: authservice
      selector: 
        app.kubernetes.io/name: redis-bb
        app.kubernetes.io/instance: authservice-authservice
      {{- if and $istioEnabled (eq (dig "istio" "mtls" "mode" "STRICT" .Values.addons.authservice.values) "STRICT") }}
      scheme: https
      tlsConfig:
        caFile: /etc/prom-certs/root-cert.pem
        certFile: /etc/prom-certs/cert-chain.pem
        keyFile: /etc/prom-certs/key.pem
        insecureSkipVerify: true  
      {{- end }}
    prometheusRule:
      enabled: true 
      namespace: monitoring
  {{- end }}
{{- end }}

{{- $legacy := and .Values.sso.oidc.realm .Values.sso.oidc.host -}}
{{- if not $legacy }}
issuer_uri: {{ include "sso.url" . }}
{{- end }}

global:
  oidc:
    host: {{ default (include "sso.host" .) .Values.sso.oidc.host }}
    realm: {{ default (include "sso.realm" .) .Values.sso.oidc.realm }}

  {{- if or .Values.sso.jwks_uri (dig "oidc" "jwksUri" false .Values.sso) }}
  jwks_uri: {{ include "sso.oidc.jwksuri" . | quote }}
  {{- else if or .Values.sso.jwks (dig "oidc" "jwks" false .Values.sso) }}
  jwks: {{ default (dig "oidc" "jwks" "" .Values.sso) .Values.sso.jwks | quote }}
  {{- end }}

  {{- if or .Values.sso.client_id (dig "sso" "client_id" false .Values.addons.authservice) }}
  client_id: {{ default (dig "sso" "client_id" "" .Values.addons.authservice) .Values.sso.client_id }}
  {{- end }}

  {{- if or .Values.sso.client_secret (dig "sso" "client_secret" false .Values.addons.authservice) }}
  client_secret: {{ default (dig "sso" "client_secret" "" .Values.addons.authservice) .Values.sso.client_secret }}
  {{- end }}

  {{- if (or .Values.sso.certificate_authority (dig "certificateAuthority" "cert" false .Values.sso)) }}
  certificate_authority: {{ (default (dig "certificateAuthority" "cert" "" .Values.sso) .Values.sso.certificate_authority) | quote }}
  {{- end }}

  {{- if not $legacy }}
  authorization_uri: {{ include "sso.oidc.auth" . }}
  token_uri: {{ include "sso.oidc.token" . }}
  logout_redirect_uri: {{ include "sso.oidc.endsession" . }}
  {{- end }}

  {{- $authserviceValues := .Values.addons.authservice.values | default dict }}
  {{- $redisValues := $authserviceValues.redis | default dict }}
  {{- if hasKey $redisValues "enabled" }}
  {{- if $redisValues.enabled }}
  redis_server_uri: "tcp://authservice-authservice-redis-bb-master:6379"
  {{- end }}
  {{- end }}

chains:
  {{- if .Values.addons.authservice.chains }}
  {{ .Values.addons.authservice.chains | toYaml | nindent 2 }}
  {{- end }}

  {{- if and .Values.addons.thanos.enabled .Values.addons.thanos.sso.enabled }}
  thanos:
    match:
      header: ":authority"
    {{- $thanosHosts := (dig "istio" "thanos" "hosts" dict .Values.addons.thanos.values) }}
    {{- if $thanosHosts }}
      prefix: {{ tpl ($thanosHosts | first) $ }}
    callback_uri: https://{{ tpl ($thanosHosts | first) $ }}/login/generic_oauth
    {{- else }}
      prefix: {{ printf "thanos.%s" $domainName }}
    callback_uri: https://thanos.{{ $domainName }}/login/generic_oauth
    {{- end }}
    client_id: "{{ .Values.addons.thanos.sso.client_id }}"
    client_secret: "{{ .Values.addons.thanos.sso.client_secret }}"
    {{- if not $legacy }}
    authorization_uri: {{ include "sso.oidc.auth" . }}
    token_uri: {{ include "sso.oidc.token" . }}
    logout_redirect_uri: {{ include "sso.oidc.endsession" . }}
    {{- end }}
  {{- end }}

  {{- if and .Values.monitoring.enabled .Values.monitoring.sso.enabled }}
  prometheus:
    match:
      header: ":authority"
    {{- $prometheusHosts := (dig "istio" "prometheus" "hosts" dict .Values.monitoring.values) }}
    {{- if $prometheusHosts }}
      prefix: {{ tpl ($prometheusHosts | first) $ }}
    callback_uri: https://{{ tpl ($prometheusHosts | first) $ }}/login/generic_oauth
    {{- else }}
      prefix: {{ printf "prometheus.%s" $domainName }}
    callback_uri: https://prometheus.{{ $domainName }}/login/generic_oauth
    {{- end }}
    client_id: {{ .Values.monitoring.sso.prometheus.client_id }}
    client_secret: "{{ .Values.monitoring.sso.prometheus.client_secret }}"
    {{- if not $legacy }}
    authorization_uri: {{ include "sso.oidc.auth" . }}
    token_uri: {{ include "sso.oidc.token" . }}
    logout_redirect_uri: {{ include "sso.oidc.endsession" . }}
    {{- end }}

  alertmanager:
    match:
      header: ":authority"
    {{- $alertmanagerHosts := (dig "istio" "alertmanager" "hosts" dict .Values.monitoring.values) }}
    {{- if $alertmanagerHosts }}
      prefix: {{ tpl ($alertmanagerHosts | first) $ }}
    callback_uri: https://{{ tpl ($alertmanagerHosts | first) $ }}/login/generic_oauth
    {{- else }}
      prefix: {{ printf "alertmanager.%s" $domainName }}
    callback_uri: https://alertmanager.{{ $domainName }}/login/generic_oauth
    {{- end }}
    client_id: {{ .Values.monitoring.sso.alertmanager.client_id }}
    client_secret: "{{ .Values.monitoring.sso.alertmanager.client_secret }}"
    {{- if not $legacy }}
    authorization_uri: {{ include "sso.oidc.auth" . }}
    token_uri: {{ include "sso.oidc.token" . }}
    logout_redirect_uri: {{ include "sso.oidc.endsession" . }}
    {{- end }}
  {{- end }}
{{- end -}}

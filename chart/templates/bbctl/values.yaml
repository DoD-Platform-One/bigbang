{{- if and .Values.bbctl.enabled .Values.monitoring.enabled }}
{{- include "values-secret" (dict "root" $ "package" .Values.bbctl "name" "bbctl" "defaults" (include "bigbang.defaults.bbctl" .)) }}
{{- end }}

{{- define "bigbang.defaults.bbctl" -}}
{{- $istioEnabled := eq (include "istioEnabled" .) "true" }}

image:
  imagePullPolicy: {{ .Values.imagePullPolicy }}

credentialsFile:
  credentials:
  {{- if and .Values.registryCredentials (kindIs "slice" .Values.registryCredentials) }}
  {{- range $item := .Values.registryCredentials }}
  - uri: {{ $item.registry }}
    username: {{ $item.username }}
    password: {{ $item.password }}
    email: {{ $item.email }}
  {{- end }}
  {{ else }}
  - uri: {{ .Values.registryCredentials.registry }}
    username: {{ .Values.registryCredentials.username }}
    password: {{ .Values.registryCredentials.password }}
    email: {{ .Values.registryCredentials.email }}
  {{- end }}
  - uri: "{{ .Values.bbctl.repoCredentials.repo }}"
    username: "{{ .Values.bbctl.repoCredentials.username }}"
    password: "{{ .Values.bbctl.repoCredentials.password }}"
    email: {{ .Values.bbctl.repoCredentials.email }}

baseConfig:
  skip-update-check: true
  registry-override: {{ .Values.bbctl.registryOverrides }}
  preflight-check:
    image: {{ .Values.bbctl.preflightCheck.image }}

istio:
  enabled: {{ $istioEnabled }}
  hardened:
    enabled: {{ or (dig "istio" "hardened" "enabled" false .Values.bbctl.values) (dig "hardened" "enabled" false .Values.istiod.values) }}

{{- end -}}

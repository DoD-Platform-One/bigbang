{{- if .Values.kiali.enabled }}
{{- include "values-secret" (dict "root" $ "package" .Values.kiali "name" "kiali" "defaults" (include "bigbang.defaults.kiali" .)) }}
{{- end }}

{{- define "bigbang.defaults.kiali" -}}
{{- $istioEnabled := eq (include "istioEnabled" .) "true" }}
# hostname is deprecated and replaced with domain. But if hostname exists then use it.
{{- $domainName := default .Values.domain .Values.hostname }}
domain: {{ $domainName }}

sso:
  enabled: {{ .Values.kiali.sso.enabled }}

openshift: {{ .Values.openshift}}

image:
  pullPolicy: {{ .Values.imagePullPolicy }}

istio:
  enabled: {{ $istioEnabled }}
  hardened:
    enabled: {{ or
      (dig "istio" "hardened" "enabled" false .Values.kiali.values)
      (dig "hardened" "enabled" false .Values.istio.values)
    }}
    monitoring:
      enabled: {{ .Values.monitoring.enabled }}
  kiali:
    gateways:
      - {{ include "getGatewayName" (dict "gateway" .Values.kiali.ingress.gateway "root" .)}}

{{- if $istioEnabled }}
podAnnotations:
  {{ include "istioAnnotation" . }}
{{- end }}

{{- if and .Values.kiali.enabled .Values.kiali.sso.enabled (or .Values.sso.certificate_authority (dig "certificateAuthority" "cert" false .Values.sso))  }}
oidcCaCert: {{ default (dig "certificateAuthority" "cert" "" .Values.sso) .Values.sso.certificate_authority | quote }}
{{- end }}

monitoring:
  enabled: {{ .Values.monitoring.enabled }}
upstream:
  cr:
    spec:
      {{- if $istioEnabled }}
      istio_namespace: istio-system
      {{- end}}
      deployment:
        image_pull_policy: {{ .Values.imagePullPolicy }}
        {{- if include "istioEnabled" . }}
        pod_annotations:
          {{ include "istioAnnotation" . }}
        {{- end }}
        hpa:
          spec:
            maxReplicas: 2
            minReplicas: 1
            targetCPUUtilizationPercentage: 80
      server:
        web_port: "443"
      auth:
        {{- if .Values.kiali.sso.enabled }}
        strategy: openid
        openid:
          client_id: "{{ .Values.kiali.sso.client_id }}"
          disable_rbac: true
          issuer_uri: "{{ include "sso.url" . }}"
          scopes:
          - openid
          - email
          username_claim: {{ dig "oidc" "claims" "email" "email" .Values.sso }}
        {{- else }}
        strategy: token
        {{- end }}
      external_services:
        grafana:
          enabled: {{ .Values.grafana.enabled }}
          {{- $grafanaUrl := first (dig "istio" "grafana" "hosts" list .Values.grafana.values) }}
          url: https://{{ tpl ($grafanaUrl | default (printf "%s.%s" "grafana" $domainName)) . }}
          {{- if .Values.grafana.enabled }}
          auth:
            {{- if (dig "admin" "existingSecret" "" .Values.grafana.values) }}
            {{- $userKey := (dig "admin" "userKey" "admin-user" .Values.grafana.values) }}
            {{- with lookup "v1" "Secret" "monitoring" .Values.grafana.values.admin.existingSecret }}
            username: {{ (get .data $userKey | b64dec) | default "admin" }}
            {{- end }}
            {{- else }}
            username: {{ dig "adminUser" "admin" .Values.grafana.values }}
            {{- end }}
            password: "secret:grafana-auth:password"
          {{- end }}
        {{- if or .Values.istiod.enabled .Values.tempo.enabled }}
        tracing:
          enabled: true
          {{- if .Values.tempo.enabled }}
          internal_url: http://tempo-tempo.tempo.svc.cluster.local:3100
          provider: tempo
          {{- end}}
        {{- end }}
        istio:
          component_status:
            components:
              - app_label: istiod
                is_core: true
                is_proxy: false
              {{- if $istioEnabled }}
              {{- range $name, $values := .Values.istio.ingressGateways }}
              {{ if ne $values.enabled false }}
              - app_label: {{ $name }}
                is_core: true
                is_proxy: true
              {{- end }}
              {{- end }}
              {{- range $name, $values := .Values.istio.values.ingressGateways }}
              {{ if ne $values.enabled false }}
              - app_label: {{ $name }}
                is_core: true
                is_proxy: true
              {{- end }}
              {{- end }}
              {{- end }}
              {{- if .Values.istioGateway.enabled }}
              {{- range $name, $gw := include "enabledGateways" $ | fromYaml }}
              {{- if eq $gw.type "ingressgateway" }}
              - app_label: {{ $gw.serviceName }}
                is_core: true
                is_proxy: true
                namespace: istio-gateway
              {{- end -}}
              {{- end -}}
              {{- end -}}
          {{- if .Values.istiod.enabled }}
          ingress_gateway_namespace: istio-gateway
          egress_gateway_namespace: istio-gateway
          {{- end }}
networkPolicies:
  enabled: {{ .Values.networkPolicies.enabled }}
  controlPlaneCidr: {{ .Values.networkPolicies.controlPlaneCidr }}
  istioNamespaceSelector:
  {{ include "istioNamespaceSelector" . | nindent 4 }}
  ingressLabels:
    {{- include "getGatewaySelector" (dict "pkg" .Values.kiali "root" .) | nindent 4 }}
{{- end -}}

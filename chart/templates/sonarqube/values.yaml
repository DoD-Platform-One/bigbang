{{- if .Values.addons.sonarqube.enabled }}
{{- include "values-secret" (dict "root" $ "package" .Values.addons.sonarqube "name" "sonarqube" "defaults" (include "bigbang.defaults.sonarqube" .)) }}
{{- end }}

{{- define "bigbang.defaults.sonarqube" -}}
{{- $istioEnabled := eq (include "istioEnabled" .) "true" -}}
# hostname is deprecated and replaced with domain. But if hostname exists then use it.
{{- $domainName := default .Values.domain .Values.hostname }}
domain: {{ $domainName }}

# Define variables to help with conditionals later
{{- $istioInjection := and $istioEnabled (eq (dig "istio" "injection" "enabled" .Values.addons.sonarqube) "enabled") }}

OpenShift:
  enabled: {{ .Values.openshift }}

istio:
  enabled: {{ $istioEnabled }}
  hardened:
    enabled: {{ or
      (dig "istio" "hardened" "enabled" false .Values.addons.sonarqube.values)
      (dig "hardened" "enabled" false .Values.istio.values)
    }}
  sonarqube:
    gateways:
      - {{ include "getGatewayName" (dict "gateway" .Values.addons.sonarqube.ingress.gateway "root" .)}}
  injection: {{ dig "istio" "injection" "enabled" .Values.addons.sonarqube }}

monitoring:
  enabled: {{ .Values.monitoring.enabled }}

networkPolicies:
  enabled: {{ .Values.networkPolicies.enabled }}
  istioNamespaceSelector:
  {{ include "istioNamespaceSelector" . | nindent 4 }}
  ingressLabels:
    {{- include "getGatewaySelector" (dict "pkg" .Values.addons.sonarqube "root" .) | nindent 4 }}

image:
  pullPolicy: {{ .Values.imagePullPolicy }}
  pullSecret: private-registry

{{- if $istioInjection }}
annotations:
  {{ include "istioAnnotation" . }}
{{- end }}

{{- if .Values.addons.sonarqube.sso.enabled }}
sonarProperties:
  sonar.auth.saml.enabled: {{ .Values.addons.sonarqube.sso.enabled }}
  sonar.core.serverBaseURL: https://sonarqube.{{ $domainName }}
  sonar.auth.saml.applicationId: {{ .Values.addons.sonarqube.sso.client_id }}
  sonar.auth.saml.providerName: {{ coalesce .Values.addons.sonarqube.sso.provider_name .Values.addons.sonarqube.sso.label .Values.sso.name }}
  sonar.auth.saml.providerId: {{ include "sso.url" . }}
  sonar.auth.saml.loginUrl: {{ include "sso.saml.service" . }}
  sonar.auth.saml.certificate.secured: {{ default (include "sso.saml.cert" .) .Values.addons.sonarqube.sso.certificate }}
  sonar.auth.saml.user.login: {{ .Values.addons.sonarqube.sso.login | default "login" }}
  sonar.auth.saml.user.name: {{ .Values.addons.sonarqube.sso.name | default "name" }}
  sonar.auth.saml.user.email: {{ .Values.addons.sonarqube.sso.email | default "email" }}
  {{- if .Values.addons.sonarqube.sso.group }}
  sonar.auth.saml.group.name: {{ .Values.addons.sonarqube.sso.group }}
  {{- end }}
{{- end }}

{{- with .Values.addons.sonarqube.database }}
  {{- if and .host .username .password .database .port }}
# External Postgres config
jdbcOverwrite:
  enable: true
  jdbcUrl: "jdbc:postgresql://{{ .host }}:{{ .port }}/{{ .database }}?socketTimeout=1500"
  jdbcUsername: {{ .username }}
  jdbcSecretName: sonarqube-db-secret
  jdbcSecretPasswordKey: postgresql-password
postgresql:
  # Use external database
  enabled: false
  {{- else }}
postgresql:
  {{- if or $istioInjection $.Values.kiali.enabled}}
  master:
    {{- if $istioInjection }}
    podAnnotations:
      {{ include "istioAnnotation" $ }}
    {{- end }}
  slave:
    {{- if $istioInjection }}
    podAnnotations:
      {{ include "istioAnnotation" $ }}
    {{- end }}
  {{- end }}
  # Use internal database, defaults are fine
  enabled: true
  service:
    port: {{ .port }}
  {{- end }}
{{- end }}
{{- end -}}


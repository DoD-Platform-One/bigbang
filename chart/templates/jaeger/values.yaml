{{- if .Values.jaeger.enabled }}
{{- include "values-secret" (dict "root" $ "package" .Values.jaeger "name" "jaeger" "defaults" (include "bigbang.defaults.jaeger" .)) }}
{{- end }}

{{- define "bigbang.defaults.jaeger" -}}
{{- $istioEnabled := eq (include "istioEnabled" .) "true" -}}
imagePullSecrets:
  - name: private-registry

image:
  pullPolicy: {{ .Values.imagePullPolicy }}

# hostname is deprecated and replaced with domain. But if hostname exists then use it.
{{- $domainName := default .Values.domain .Values.hostname }}
hostname: {{ $domainName }}
domain: {{ $domainName }}

istio:
  enabled: {{ $istioEnabled }}
  hardened:
    enabled: {{ or
      (dig "istio" "hardened" "enabled" false .Values.jaeger.values)
      (dig "hardened" "enabled" false .Values.istio.values)
    }}
  jaeger:
    enabled: {{ $istioEnabled }}
    gateways:
      - {{ include "getGatewayName" (dict "gateway" .Values.jaeger.ingress.gateway "root" .)}}

{{- if $istioEnabled }}
annotations:
  {{ include "istioAnnotation" . }}
{{- end }}

monitoring:
  enabled: {{ .Values.monitoring.enabled }}
  # conditional passes only for default istio: enabled, mTLS: SCRICT
  {{- if and $istioEnabled (eq (dig "istio" "mtls" "mode" "STRICT" .Values.jaeger.values) "STRICT") }}
  serviceMonitor:
    scheme: https
    tlsConfig:
      caFile: /etc/prom-certs/root-cert.pem
      certFile: /etc/prom-certs/cert-chain.pem
      keyFile: /etc/prom-certs/key.pem
      insecureSkipVerify: true  # Prometheus does not support Istio security naming, thus skip verifying target pod certificate
  {{- end }}

elasticsearch:
  enabled: {{ .Values.elasticsearchKibana.enabled }}

sso:
  enabled: {{ .Values.jaeger.sso.enabled }}


{{- if or .Values.jaeger.sso.enabled $istioEnabled .Values.kiali.enabled }}
jaeger:
  spec:
    strategy: allInOne
    {{- if or .Values.jaeger.sso.enabled $istioEnabled }}
    {{- $jaegerAuthserviceKey := (dig "selector" "key" "protect" .Values.addons.authservice.values) }}
    {{- $jaegerAuthserviceValue := (dig "selector" "value" "keycloak" .Values.addons.authservice.values) }}
    allInOne:
      {{- if .Values.jaeger.sso.enabled }}
      labels:
        {{ $jaegerAuthserviceKey }}: {{ $jaegerAuthserviceValue }}
      {{- end }}
      {{- if $istioEnabled }}
      annotations:
        {{ include "istioAnnotation" . }}
      {{- end }}
    query:
      {{- if .Values.jaeger.sso.enabled }}
      labels:
        {{ $jaegerAuthserviceKey }}: {{ $jaegerAuthserviceValue }}
      {{- end }}
      {{- if $istioEnabled }}
      annotations:
        {{ include "istioAnnotation" . }}
      {{- end }}
    {{- end }}
    {{- if $istioEnabled }}
    agent:
      annotations:
        {{ include "istioAnnotation" . }}
    ingester:
      annotations:
        {{ include "istioAnnotation" . }}
    collector:
      annotations:
        {{ include "istioAnnotation" . }}
    {{- end }}
{{- end }}
openshift:
  enabled: {{ .Values.openshift }}
networkPolicies:
  enabled: {{ .Values.networkPolicies.enabled }}
  istioNamespaceSelector:
  {{ include "istioNamespaceSelector" . | nindent 4 }}
  controlPlaneCidr: {{ .Values.networkPolicies.controlPlaneCidr }}
  ingressLabels:
    {{- include "getGatewaySelector" (dict "pkg" .Values.jaeger "root" .) | nindent 4 }}

webhookCertGen:
  image:
    pullPolicy: {{ .Values.imagePullPolicy }}
  cleanupProxy:
    image:
      pullPolicy: {{ .Values.imagePullPolicy }}
{{- end -}}

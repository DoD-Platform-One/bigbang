{{- if .Values.jaeger.enabled }}
{{- include "values-secret" (dict "root" $ "package" .Values.jaeger "name" "jaeger" "defaults" (include "bigbang.defaults.jaeger" .)) }}
{{- end }}

{{- define "bigbang.defaults.jaeger" -}}
imagePullSecrets:
  - name: private-registry

image:
  pullPolicy: {{ .Values.imagePullPolicy }}
  
# hostname is deprecated and replaced with domain. But if hostname exists then use it.
{{- $domainName := default .Values.domain .Values.hostname }}
hostname: {{ $domainName }}
domain: {{ $domainName }}

istio:
  enabled: {{ .Values.istio.enabled }}
  jaeger:
    gateways:
    - istio-system/{{ default "public" .Values.jaeger.ingress.gateway }}

{{- if .Values.istio.enabled }}
annotations:
  {{ include "istioAnnotation" . }}
{{- end }}

monitoring:
  enabled: {{ .Values.monitoring.enabled }}
elasticsearch:
  enabled: {{ .Values.logging.enabled }}

sso:
  enabled: {{ .Values.jaeger.sso.enabled }}

{{- if or .Values.jaeger.sso.enabled .Values.istio.enabled }}
jaeger:
  spec:
    {{- $jaegerAuthserviceKey := (dig "selector" "key" "protect" .Values.addons.authservice.values) }}
    {{- $jaegerAuthserviceValue := (dig "selector" "value" "keycloak" .Values.addons.authservice.values) }}
    allInOne:
      {{- if .Values.jaeger.sso.enabled }}
      labels:
        {{ $jaegerAuthserviceKey }}: {{ $jaegerAuthserviceValue }}
      {{- end }}
      {{- if .Values.istio.enabled }}
      annotations:
        {{ include "istioAnnotation" . }}
      {{- end }}
    query:
      {{- if .Values.jaeger.sso.enabled }}
      labels:
        {{ $jaegerAuthserviceKey }}: {{ $jaegerAuthserviceValue }}
      {{- end }}
      {{- if .Values.istio.enabled }}
      annotations:
        {{ include "istioAnnotation" . }}
      {{- end }}
    {{- if .Values.istio.enabled }}
    agent:
      annotations:
        {{ include "istioAnnotation" . }}
    ingester:
      annotations:
        {{ include "istioAnnotation" . }}
    collector:
      annotations:
        {{ include "istioAnnotation" . }}
    {{- end }}
{{- end }}
openshift:
  enabled: {{ .Values.openshift }}
networkPolicies:
  enabled: {{ .Values.networkPolicies.enabled }}
  controlPlaneCidr: {{ .Values.networkPolicies.controlPlaneCidr }}
  ingressLabels:
    {{- $gateway := default "public" .Values.jaeger.ingress.gateway }}
    {{- $default := dict "app" (dig "gateways" $gateway "ingressGateway" nil .Values.istio) "istio" nil }}
    {{- toYaml (dig "values" "gateways" $gateway "selector" $default .Values.istio) | nindent 4 }}
{{- end -}}

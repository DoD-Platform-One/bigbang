# Overrides for all policies.  Blank values indicate to use the policy-specific value or the default value

# -- Enable policy deployments
enabled: true

# -- Override all policies' validation failure action with "audit" or "enforce".  If blank, uses policy setting.
validationFailureAction: ""

# -- Override all policies' time to wait for admission webhook to respond.  If blank, uses policy setting or default (10).  Range is 1 to 30.
webhookTimeoutSeconds: 30

# -- Adds an exclusion to all policies.  This is merged with any policy-specific excludes.  See https://kyverno.io/docs/writing-policies/match-exclude for fields.
exclude: {}

# -- Additional labels to apply to all policies.
customLabels: {}

# webhookTimeoutSecond: can be added to any policy to override the timeout for that policy
# match: can be added to any policy to completely override selection of resources by the policy
# exclude: can be added to any policy to add specific exclusions to the policy
# See https://kyverno.io/docs/writing-policies/match-exclude on how to format match/exclude

# -- Controls for the job that will wait for all policies to be ready.  This can be used with Helm's --wait-for-jobs to wait for all policies to be ready.
waitforready:
  # -- Controls wait for ready deployment
  enabled: true
  # -- Image to use in wait for ready job.  This must contain kubectl.
  image:
    repository: registry1.dso.mil/ironbank/opensource/kubernetes/kubectl
    tag: v1.24.4
  # -- Pull secret for wait for ready job
  imagePullSecrets: []

policies:
  # Keep policies in alphabetical order and name them the same as the .yaml file to help with configuration and troubleshooting

  # -- Sample policy showing values that can be added to any policy
  sample:
    # -- Controls policy deployment
    enabled: false
    # -- Controls if a validation policy rule failure should disallow (enforce) or allow (audit) the admission
    validationFailureAction: audit # or enforce
    # -- Specifies the maximum time in seconds allowed to apply this policy. Default is 10. Range is 1 to 30.
    webhookTimeoutSeconds: ""
    # -- Defines when this policy's rules should be applied.  This completely overrides any default matches.
    match: {}
    # -- Defines when this policy's rules should not be applied.  This completely overrides any default excludes.
    exclude: {}
    # -- Policy specific parameters that are added to the configMap for the policy rules
    parameters: {}

  # -- Clone existing configMap or secret in new Namespaces
  clone-configs:
    enabled: false
    parameters:
      # -- ConfigMap or Secrets that should be cloned.  Each item requres the kind, name, and namespace of the resource to clone
      clone: []
        #   # -- Name of the ConfigMap/Secret
        # - name: sample
        #   # -- Kind of the resource: ConfigMap or Secret
        #   kind: ConfigMap
        #   # -- Namespace to find the ConfigMap/Secret.  This can be templated.
        #   namespace: "{{ .Release.Namespace }}"

  # -- Prevent specified annotations on pods
  disallow-annotations:
    enabled: false
    validationFailureAction: audit
    parameters:
      # -- List of annotations disallowed on pods.  Entries can be just a "key", or a quoted "key: value".  Wildcards '*' and '?' are supported.
      disallow: []

  # -- Prevent resources that use deprecated or removed APIs (through Kubernetes 1.26)
  disallow-deprecated-apis:
    enabled: false
    validationFailureAction: audit

  # -- Prevent use of the host namespace (PID, IPC, Network) by pods
  disallow-host-namespaces:
    enabled: true
    validationFailureAction: enforce

  # -- Prevent container images with specified tags.  Also, requires images to have a tag.
  disallow-image-tags:
    enabled: false
    validationFailureAction: audit
    parameters:
      disallow:
      - latest

  # -- Prevent the `sidecar.istio.io/inject: false` label on pods.
  disallow-istio-injection-bypass:
    enabled: false
    validationFailureAction: audit

  # -- Prevent specified labels on pods
  disallow-labels:
    enabled: false
    validationFailureAction: audit
    parameters:
      # -- List of labels disallowed on pods.  Entries can be just a "key", or a quoted "key: value".  Wildcards '*' and '?' are supported.
      disallow: []

  # -- Prevent pods from using the listed namespaces
  disallow-namespaces:
    enabled: false
    validationFailureAction: audit
    parameters:
      # -- List of namespaces to deny pod deployment
      disallow:
      - default

  # -- Prevent services of the type NodePort
  disallow-nodeport-services:
    enabled: true
    validationFailureAction: enforce

  # -- Prevent the use of `exec` or `attach` on pods
  disallow-pod-exec:
    enabled: false
    validationFailureAction: attach

  # -- Prevent privilege escalation on pods
  disallow-privilege-escalation:
    enabled: true
    validationFailureAction: enforce

  # -- Prevent containers that run as privileged
  disallow-privileged-containers:
    enabled: true
    validationFailureAction: enforce

  # -- Prevent specified SELinux options from being used on pods.
  disallow-selinux-options:
    enabled: true
    validationFailureAction: enforce
    parameters:
      # -- List of selinux options that are not allowed.  Valid values include `level`, `role`, `type`, and `user`.
      # Defaults pulled from https://kubernetes.io/docs/concepts/security/pod-security-standards
      disallow:
      - user
      - role

  # -- Prevent containers from mounting the same volume as writable and with a subpath (CVE-2021-25741)
  disallow-shared-subpath-volume-writes:
    enabled: true
    validationFailureAction: enforce

  # -- Prevent tolerations that bypass specified taints
  disallow-tolerations:
    enabled: false
    validationFailureAction: audit
    parameters:
      # -- List of taints to protect from toleration.  Each entry can have `key`, `value`, and/or `effect`.  Wildcards '*' and '?' can be used
      # If key, value, or effect are not defined, they are ignored in the policy rule
      disallow:
      # Prevent scheduling of pods on control plane nodes
      - key: node-role.kubernetes.io/master

      # The following example would prevent tolerations that match a taint of "Critical*Only=true:*NoSchedule" where '*' is zero or more characters.
      # - key: "Critical*Only"
      #   value: "true"
      #   effect: "*NoSchedule"
      # This would block tolerations with
      #  - key=null && effect=(NoSchedule || PreferNoSchedule)
      #  - key=Critical*Only && operator=Exists && effect=(null || NoSchedule || PreferNoSchedule)
      #  - key=Critical*Only && operator=Equal && value=true && effect=(null || NoSchedule || PreferNoSchedule)

  # -- Prevent additional RBAC permissions on default service accounts
  disallow-rbac-on-default-serviceaccounts:
    enabled: false
    validationFailureAction: audit
    exclude:
      any:
      - resources:
          # Clusters allow all service accounts access to the service account issuer discovery documents
          # See https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#service-account-issuer-discovery
          name: system:service-account-issuer-discovery

  # -- Require specified annotations on all pods
  require-annotations:
    enabled: false
    validationFailureAction: audit
    parameters:
      # -- List of annotations required on all pods.  Entries can be just a "key", or a quoted "key: value".  Wildcards '*' and '?' are supported.
      require: []

  # -- Require containers have CPU limits defined and within the specified range
  require-cpu-limit:
    enabled: false
    validationFailureAction: audit
    parameters:
      # -- CPU limitations (only one required condition needs to be met).  The following operators are valid: >, <, >=, <=, !, |, &.
      require:
      - <10

  # -- Requires containers to drop all Linux capabilities
  require-drop-all-capabilities:
    enabled: true
    validationFailureAction: enforce

  # -- Require specified images to be signed and verified
  require-image-signature:
    enabled: false
    validationFailureAction: audit
    parameters:
      # -- List of images that must be signed and the public key to verify.  Use `kubectl explain clusterpolicy.spec.rules.verifyImages` for fields.
      require: []
      # Example
      # - image: "ghcr.io/kyverno/test-verify-image:*"
      #   key: |-
      #     -----BEGIN PUBLIC KEY-----
      #     MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE8nXRh950IZbRj8Ra/N9sbqOPZrfM
      #     5/KAQN0/KjHcorm/J5yctVd7iEcnessRQjU917hmKO6JWVGHpDguIyakZA==
      #     -----END PUBLIC KEY-----

  # -- Require Istio sidecar injection label on namespaces
  require-istio-on-namespaces:
    enabled: false
    validationFailureAction: audit

  # -- Require specified labels to be on all pods
  require-labels:
    enabled: false
    validationFailureAction: audit
    parameters:
      # -- List of labels required on all pods.  Entries can be just a "key", or a quoted "key: value".  Wildcards '*' and '?' are supported.
      # See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/#labels
      # See https://helm.sh/docs/chart_best_practices/labels/#standard-labels
      require:
      - app.kubernetes.io/name
      - app.kubernetes.io/instance
      - app.kubernetes.io/version

  # -- Require containers have memory limits defined and within the specified range
  require-memory-limit:
    enabled: false
    validationFailureAction: audit
    parameters:
      # -- Memory limitations (only one required condition needs to be met).  Can use standard Kubernetes resource units (e.g. Mi, Gi).  The following operators are valid: >, <, >=, <=, !, |, &.
      require:
      - <64Gi

  # -- Require containers to run with non-root group
  require-non-root-group:
    enabled: true
    validationFailureAction: enforce

  # -- Require containers to run as non-root user
  require-non-root-user:
    enabled: true
    validationFailureAction: enforce

  # -- Require specified probes on pods
  require-probes:
    enabled: false
    validationFailureAction: audit
    parameters:
      # -- List of probes that are required on pods.  Valid values are `readinessProbe`, `livenessProbe`, and `startupProbe`.
      require:
      - readinessProbe
      - livenessProbe

  # -- Require CPU and memory requests equal limits for guaranteed quality of service
  require-requests-equal-limits:
    enabled: false
    validationFailureAction: audit

  # -- Require containers set root filesystem to read-only
  require-ro-rootfs:
    enabled: false
    validationFailureAction: audit

  # -- Restricts pods that use AppArmor to specified profiles
  restrict-apparmor:
    enabled: true
    validationFailureAction: enforce
    parameters:
      # -- List of allowed AppArmor profiles
      # Defaults pulled from https://kubernetes.io/docs/concepts/security/pod-security-standards/#baseline
      allow:
      - runtime/default
      - localhost/*

  # -- Restrict services with External IPs to a specified list (CVE-2020-8554)
  restrict-external-ips:
    enabled: true
    validationFailureAction: enforce
    parameters:
      # -- List of external IPs allowed in services.  Must be an IP address.  Use the wildcard `?*` to support subnets (e.g. `192.168.0.?*`)
      allow: []

  # -- Restrict services with External Names to a specified list (CVE-2020-8554)
  restrict-external-names:
    enabled: true
    validationFailureAction: enforce
    parameters:
      # -- List of external names allowed in services.  Must be a lowercase RFC-1123 hostname.
      allow: []

  # -- Restrict Linux capabilities added to containers to the specified list
  restrict-capabilities:
    enabled: true
    validationFailureAction: enforce
    parameters:
      # -- List of capabilities that are allowed to be added
      # Defaults pulled from https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
      # See https://man7.org/linux/man-pages/man7/capabilities.7.html for list of capabilities.  The `CAP_` prefix is removed in Kubernetes names.
      allow:
      - NET_BIND_SERVICE

  # -- Restrict container group IDs to specified ranges
  # NOTE: Using require-non-root-group will force runAsGroup to be defined
  restrict-group-id:
    enabled: false
    validationFailureAction: audit
    parameters:
      # -- Allowed group IDs / ranges.  The following operators are valid: >, <, >=, <=, !, |, &.
      # For a lower and upper limit, use ">=min & <=max"
      allow:
      - ">=1000"

  # -- Restrict the paths that can be mounted by hostPath volumes to the allowed list.  HostPath volumes are normally disallowed.  If exceptions are made, the path(s) should be restricted.
  restrict-host-path-mount:
    enabled: true
    validationFailureAction: audit
    parameters:
      # -- List of allowed paths for hostPath volumes to mount
      allow: []

  restrict-host-path-mount-pv:
    enabled: true
    validationFailureAction: audit
    parameters:
      # -- List of allowed paths for hostPath volumes to mount
      allow: []

  # -- Restrict the paths that can be mounted as read/write by hostPath volumes to the allowed list.  HostPath volumes, if allowed, should normally be mounted as read-only.  If exceptions are made, the path(s) should be restricted.
  restrict-host-path-write:
    enabled: true
    validationFailureAction: audit
    parameters:
      # -- List of allowed paths for hostPath volumes to mount as read/write
      allow: []

  # -- Restrict host ports in containers to the specified list
  restrict-host-ports:
    enabled: true
    validationFailureAction: enforce
    parameters:
      # -- List of allowed host ports
      allow: []

  # -- Restricts container images to registries in the specified list
  restrict-image-registries:
    enabled: true
    validationFailureAction: audit
    parameters:
      # -- List of allowed registries that images may use
      allow:
      - registry1.dso.mil

  # -- Restrict mounting /proc to the specified mask
  restrict-proc-mount:
    enabled: true
    validationFailureAction: enforce
    parameters:
      # -- List of allowed proc mount values.  Valid values are `Default` and `Unmasked`.
      # Defaults pulled from https://kubernetes.io/docs/concepts/security/pod-security-standards
      allow:
      - Default

  # -- Restrict seccomp profiles to the specified list
  restrict-seccomp:
    enabled: true
    validationFailureAction: enforce
    parameters:
      # -- List of allowed seccomp profiles.  Valid values are `Localhost`, `RuntimeDefault`, and `Unconfined`
      # Defaults pulled from https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
      allow:
      - RuntimeDefault
      - Localhost

  # -- Restrict SELinux types to the specified list.
  restrict-selinux-type:
    enabled: true
    validationFailureAction: enforce
    parameters:
      # -- List of allowed values for the `type` field
      # Defaults pulled from https://kubernetes.io/docs/concepts/security/pod-security-standards
      allow:
      - container_t
      - container_init_t
      - container_kvm_t

  # -- Restrict sysctls to the specified list
  restrict-sysctls:
    enabled: true
    validationFailureAction: enforce
    parameters:
      # -- List of allowed sysctls.
      # Defaults pulled from https://kubernetes.io/docs/concepts/security/pod-security-standards
      allow:
      - kernel.shm_rmid_forced
      - net.ipv4.ip_local_port_range
      - net.ipv4.ip_unprivileged_port_start
      - net.ipv4.tcp_syncookies
      - net.ipv4.ping_group_range

  # -- Restrict user IDs to the specified ranges
  # NOTE: Using require-non-root-user will force runAsUser to be defined
  restrict-user-id:
    enabled: false
    validationFailureAction: audit
    parameters:
      # -- Allowed user IDs / ranges.  The following operators are valid: >, <, >=, <=, !, |, &.
      # For a lower and upper limit, use ">=min & <=max"
      allow:
      - ">=1000"

  # -- Restrict the volume types to the specified list
  restrict-volume-types:
    enabled: true
    validationFailureAction: enforce
    parameters:
      # -- List of allowed Volume types.  Valid values are the volume types listed here: https://kubernetes.io/docs/concepts/storage/volumes/#volume-types
      # Defaults pulled from https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
      allow:
      - "configMap"
      - "csi"
      - "downwardAPI"
      - "emptyDir"
      - "ephemeral"
      - "persistentVolumeClaim"
      - "projected"
      - "secret"

  # -- Updates the image pull policy on containers
  update-image-pull-policy:
    enabled: false
    parameters:
      # -- List of image pull policy updates.  `from` contains the pull policy value to replace.  If `from` is blank, it matches everything.  `to` contains the new pull policy to use.  Must be one of `Always`, `Never`, or `IfNotPresent`.
      update:
      - to: Always

  # -- Updates an existing image registry with a new registry in containers (e.g. proxy)
  update-image-registry:
    enabled: false
    parameters:
      # -- List of registry updates.  `from` contains the registry to replace. `to` contains the new registry to use.
      update: []
      # - from: "registry.to.replace"
      #   to: "new.registry.to.use"

  # -- Updates automount token on default service accounts to false
  update-token-automount:
    enabled: false

# -- Adds custom policies.  See https://kyverno.io/docs/writing-policies/.
additionalPolicies:
  # -- Name of the policy.  Addtional policies can be added by adding a key.
  samplePolicy:
    # -- Controls policy deployment
    enabled: false
    # -- Kind of policy.  Currently, "ClusterPolicy" and "Policy" are supported.
    kind: ClusterPolicy
    # -- If kind is "Policy", which namespace to target.  The namespace must already exist.
    namespace: ""
    # -- Policy annotations to add
    annotations:
      # -- Human readable name of policy
      policies.kyverno.io/title: Sample Policy
      # -- Category of policy.  Arbitrary.
      policies.kyverno.io/category: Examples
      # -- Severity of policy if a violation occurs.  Choose "critical", "high", "medium", "low".
      policies.kyverno.io/severity: low
      # -- Type of resource policy applies to (e.g. Pod, Service, Namespace)
      policies.kyverno.io/subject: Pod
      # -- Description of what the policy does, why it is important, and what items are allowed or unallowed.
      policies.kyverno.io/description: >-
        This sample policy blocks pods from deploying into the 'default' namespace.
    # -- Policy specification.  See `kubectl explain clusterpolicies.spec`
    spec:
      # -- Policy rules.  At least one is required
      rules:
      - name: sample-rule
        match:
          any:
          - resources:
              kinds:
              - Pods
        validate:
          message: "Using 'default' namespace is not allowed."
          pattern:
            metadata:
              namespace: "!default"

# -- Reserved values for Big Bang test automation
bbtests:
  enabled: false
  scripts:
    image: registry1.dso.mil/ironbank/opensource/kubernetes/kubectl:v1.24.4
    envs:
      ENABLED_POLICIES: '{{ $p := list }}{{ range $k, $v := .Values.policies }}{{ if $v.enabled }}{{ $p = append $p $k }}{{ end }}{{ end }}{{ join " " $p }}'
      IMAGE_PULL_SECRET: '{{ .Values.bbtests.imagePullSecret }}'
    additionalVolumeMounts:
      - name: "kyverno-policies-bbtest-manifests"
        mountPath: /yaml
      - name: "kyverno-policies-bbtest-kube-cache"
        mountPath: /.kube/cache
    additionalVolumes:
      - name: "kyverno-policies-bbtest-manifests"
        configMap:
          name: "kyverno-policies-bbtest-manifests"
      - name: "kyverno-policies-bbtest-kube-cache"
        emptyDir: {}
  imagePullSecret: private-registry
